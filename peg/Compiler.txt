Start
    = a:( Token / Text )+ { return a }
    / '' { return [] }

Token
    = '{{' _ a:Expression _ '}}' { return a }

Text
    = . { return new TextToken( text(), location() ) }

Expression
    = '(' _ a:CallExpression _ ')' { return a }
    / CallExpression
    / '(' _ a:Literal _ ')' { return a }
    / Literal

CallExpression
    = a:'@'? b:IdentifierName c:(
        _ '.' _ d:IdentifierName { return new CallExpressionObjectAccess( d ) } /
        _ '[' _ d:Expression _ ']' { return new CallExpressionArrayAccess( d ) } /
        _ '(' _ d:Arguments? _ ')' { return new CallExpressionInvocation( d ?? [] ) }
      )* { return new CallExpressionToken( '@' === a, b, c, text(), location() ) }

Arguments
    = a:Expression b:( _ ',' _ Expression )* { return [ a, ...b.map( ( [ ,,, v ]: any ) => v ) ] }

Literal
    = a:Null { return new LiteralToken( a, text(), location() ) }
    / a:Boolean { return new LiteralToken( a, text(), location() ) }
    / a:Number { return new LiteralToken( a, text(), location() ) }
    / a:String { return new LiteralToken( a, text(), location() ) }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                     PRIMITIVES                                                     //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

_
    = [ \t\r\n]*

IdentifierName
    = !ReservedWord a:( [a-zA-Z_$] [a-zA-Z0-9_$]* ) { return [ a[0], ... a[1] ].join( '' ) }

Null
    = 'null' ![a-zA-Z0-9_$] { return null }
    / 'NULL' ![a-zA-Z0-9_$] { return null }

Boolean
    = 'true' ![a-zA-Z0-9_$] { return true }
    / 'TRUE' ![a-zA-Z0-9_$] { return true }
    / 'false' ![a-zA-Z0-9_$] { return false }
    / 'FALSE' ![a-zA-Z0-9_$] { return false }

String
    = "'" a:( "\\'" / "\\\\" / [^'] )* "'" { return a.map( ( v: any ) => -1 < [ "\\'", "\\\\" ].indexOf( v ) ? v[1] : v ).join( '' ) }
    / '"' a:( '\\"' / "\\\\" / [^"] )* '"' { return a.map( ( v: any ) => -1 < [ '\\"', "\\\\" ].indexOf( v ) ? v[1] : v ).join( '' ) }
    / "`" a:( ! "${" ( "\\`" / "\\\\" / [^`] ) )* "`" { return a.map( ( [ , v ]: any ) => -1 < [ "\\`", "\\\\" ].indexOf( v ) ? v[1] : v ).join( '' ) }

Number
    = a:DecimalLiteral !( [a-zA-Z_$] / [0-9] ) { return a }

DecimalLiteral
    = [+-]? ( "0" / [1-9] [0-9]* ) "." [0-9]* ( "e"i [+-]? [0-9]+ )? { return parseFloat( text() ) }
    / [+-]? "." [0-9]+ ( "e"i [+-]? [0-9]+ )? { return parseFloat( text() ) }
    / [+-]? ( "0" / [1-9] [0-9]* ) ( "e"i [+-]? [0-9]+ )? { return parseFloat( text() ) }

ReservedWord
    = Null
    / Boolean
