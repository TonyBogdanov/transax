Start
    = a:( Token / Text )+ { return collapse( a ) }
    / '' { return [ new TextToken( '' ) ] }

Text
    = a:_Symbol { return new TextToken( a ) }

Token
    = '{{' _ a:( Literal / Expression ) _ '}}' { return a }

Literal
    = a:( _Null / _String / _Float / _Integer ) { return new LiteralToken( a ) }

Expression
    = a:Identifier b:( ObjectAccess / ArrayAccess )* { return new ExpressionToken( a, b ) }

Identifier
    = b:'@'? a:_Identifier { return new IdentifierToken( a, '@' === b ) }

ObjectAccess
    = _ '.' _ a:_Identifier { return new ObjectAccessToken( a ) }

ArrayAccess
    = _ '[' _ a:( Literal / Expression ) _ ']' { return new ArrayAccessToken( a ) }
