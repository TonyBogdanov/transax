_
    = [ \t\r\n]*

__
    = [ \t\r\n]+

_Symbol
    = v:. { return v }

_Null
    = 'null' { return null }
    / 'NULL' { return null }

_Integer
    = '0' { return 0 }
    / v:( '-'? [1-9] [0-9]* ) { return parseInt( [ v[0], v[1], ... v[2] ].join( '' ), 10 ) }

_Float
    = v:( '-'? [1-9] [0-9]* '.' [0-9]+ ) { return parseFloat( [ v[0], v[1], v[2].join( '' ), '.', v[4].join( '' ) ]
        .join( '' ) ) }
    / v:( '-'? ( '0' / '' ) '.' [0-9]+ ) { return parseFloat( [ ... v.slice( 0, 3 ), ... v[3] ].join( '' ) ) }

_String
    = "'" v:( "\\'" / [^'] )* "'" { return v.map( ( m: any ) => "\\'" === m ? m[1] : m ).join( '' ) }
    / '"' v:( '\\"' / [^"] )* '"' { return v.map( ( m: any ) => '\\"' === m ? m[1] : m ).join( '' ) }

_Name
    = v:( [a-zA-Z_] [a-zA-Z0-9_]* ) { return [ v[0], ... v[1] ].join( '' ) }

_Index
    = "[" _ v:( "0" / [1-9] [0-9]* ) _ "]" { return parseInt( 'string' === typeof v ? v : [ v[0], ... v[1] ]
        .join( '' ), 10 ) }
