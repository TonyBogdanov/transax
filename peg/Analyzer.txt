Start
    = a:( [^a-zA-Z_$]? Token / . )* { return a.flat().filter( ( v: any ) => v instanceof AnalyzerToken ) }

Token
    = a:Identifier _ "(" _ b:String _ [,)] { return new AnalyzerToken( a, b, text(), location() ) }

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                     PRIMITIVES                                                     //
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

_
    = [ \t\r\n]*

String
    = "'" a:( "\\'" / "\\\\" / [^'] )* "'" { return a.map( ( v: any ) => -1 < [ "\\'", "\\\\" ].indexOf( v ) ? v[1] : v ).join( '' ) }
    / '"' a:( '\\"' / "\\\\" / [^"] )* '"' { return a.map( ( v: any ) => -1 < [ '\\"', "\\\\" ].indexOf( v ) ? v[1] : v ).join( '' ) }
    / "`" a:( ! "${" ( "\\`" / "\\\\" / [^`] ) )* "`" { return a.map( ( [ , v ]: any ) => -1 < [ "\\`", "\\\\" ].indexOf( v ) ? v[1] : v ).join( '' ) }

Identifier
    = a:( [a-zA-Z_$] [a-zA-Z0-9_$]* ) { return [ a[0], ... a[1] ].join( '' ) }
