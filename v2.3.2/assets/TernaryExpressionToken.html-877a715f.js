import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as d,a as e,d as l,w as n,b as t,e as s}from"./app-b6726c48.js";const h={},c=e("h1",{id:"class-ternaryexpressiontoken",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-ternaryexpressiontoken","aria-hidden":"true"},"#"),t(" Class: TernaryExpressionToken")],-1),u=e("p",null,"Represents a ternary expression that returns the result of the truthy expression if the test expression returns a truthy value, or the result of the falsy expression otherwise.",-1),p=e("p",null,[t("Examples: "),e("code",null,"a ? b : c"),e("code",null,"( 0 < 1 ) ? b : c")],-1),_=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),f=e("code",null,"CompilerToken",-1),m=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"TernaryExpressionToken")])],-1),x=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),y=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),t(" Constructors")],-1),T=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),g=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),k=s('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new TernaryExpressionToken</strong>(<code>test</code>, <code>truthy</code>, <code>falsy</code>, <code>text</code>, <code>location</code>)</p><p>Creates a new instance.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',5),C=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),b=e("td",{style:{"text-align":"left"}},[e("code",null,"test")],-1),E={style:{"text-align":"left"}},w=e("code",null,"CompilerToken",-1),v=e("td",{style:{"text-align":"left"}},"The test expression.",-1),R=e("td",{style:{"text-align":"left"}},[e("code",null,"truthy")],-1),N={style:{"text-align":"left"}},P=e("code",null,"CompilerToken",-1),I=e("td",{style:{"text-align":"left"}},"The truthy expression.",-1),O=e("td",{style:{"text-align":"left"}},[e("code",null,"falsy")],-1),V={style:{"text-align":"left"}},W=e("code",null,"CompilerToken",-1),B=e("td",{style:{"text-align":"left"}},"The falsy expression.",-1),D=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"text")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The full text (content) of the expression.")],-1),L=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"location")]),e("td",{style:{"text-align":"left"}},[e("code",null,"LocationRange")]),e("td",{style:{"text-align":"left"}},"The location of the invocation within the source code.")],-1),M=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),t(" Overrides")],-1),S=s('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> column</h3><p>• <strong>column</strong>: <code>number</code></p><p>The column number of the expression within the translation message.</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4>',5),A=e("hr",null,null,-1),F=e("h3",{id:"falsy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#falsy","aria-hidden":"true"},"#"),t(" falsy")],-1),H=e("code",null,"Readonly",-1),j=e("strong",null,"falsy",-1),q=e("code",null,"CompilerToken",-1),z=e("hr",null,null,-1),G=e("h3",{id:"line",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#line","aria-hidden":"true"},"#"),t(" line")],-1),J=e("p",null,[t("• "),e("strong",null,"line"),t(": "),e("code",null,"number")],-1),K=e("p",null,"The line number of the expression within the translation message.",-1),Q=e("h4",{id:"inherited-from-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-1","aria-hidden":"true"},"#"),t(" Inherited from")],-1),U=e("hr",null,null,-1),X=e("h3",{id:"test",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#test","aria-hidden":"true"},"#"),t(" test")],-1),Y=e("code",null,"Readonly",-1),Z=e("strong",null,"test",-1),$=e("code",null,"CompilerToken",-1),ee=e("hr",null,null,-1),te=e("h3",{id:"text",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#text","aria-hidden":"true"},"#"),t(" text")],-1),oe=e("p",null,[t("• "),e("strong",null,"text"),t(": "),e("code",null,"string")],-1),le=e("p",null,"The full text (content) of the expression.",-1),ne=e("h4",{id:"inherited-from-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-2","aria-hidden":"true"},"#"),t(" Inherited from")],-1),se=e("hr",null,null,-1),ae=e("h3",{id:"truthy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#truthy","aria-hidden":"true"},"#"),t(" truthy")],-1),re=e("code",null,"Readonly",-1),ie=e("strong",null,"truthy",-1),de=e("code",null,"CompilerToken",-1),he=s('<h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile</h3><p>▸ <strong>compile</strong>(<code>context</code>): <code>string</code></p><p>Compiles the expression into an executable ECMAScript6 string.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>',5),ce=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),ue=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),pe={style:{"text-align":"left"}},_e=e("code",null,"CompilerContext",-1),fe=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),me=e("h4",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns","aria-hidden":"true"},"#"),t(" Returns")],-1),xe=e("p",null,[e("code",null,"string")],-1),ye=e("h4",{id:"overrides-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-1","aria-hidden":"true"},"#"),t(" Overrides")],-1),Te=s('<hr><h3 id="compilewrap" tabindex="-1"><a class="header-anchor" href="#compilewrap" aria-hidden="true">#</a> compileWrap</h3><p>▸ <code>Protected</code> <strong>compileWrap</strong>(<code>context</code>, <code>instanceOfs</code>): <code>string</code></p><p>Same as <code>compile()</code> except that it wraps the compiled expression in parentheses if the current token is an instance of the specified types.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',5),ge=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),ke=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),Ce={style:{"text-align":"left"}},be=e("code",null,"CompilerContext",-1),Ee=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),we=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"instanceOfs")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Function"),t("[]")]),e("td",{style:{"text-align":"left"}},"The types to check for.")],-1),ve=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1","aria-hidden":"true"},"#"),t(" Returns")],-1),Re=e("p",null,[e("code",null,"string")],-1),Ne=e("h4",{id:"inherited-from-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-3","aria-hidden":"true"},"#"),t(" Inherited from")],-1);function Pe(Ie,Oe){const o=r("RouterLink");return i(),d("div",null,[c,u,p,_,e("ul",null,[e("li",null,[e("p",null,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[f]),_:1})]),m])]),x,y,e("ul",null,[e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#constructor"},{default:n(()=>[t("constructor")]),_:1})])]),T,e("ul",null,[e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#column"},{default:n(()=>[t("column")]),_:1})]),e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#falsy"},{default:n(()=>[t("falsy")]),_:1})]),e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#line"},{default:n(()=>[t("line")]),_:1})]),e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#test"},{default:n(()=>[t("test")]),_:1})]),e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#text"},{default:n(()=>[t("text")]),_:1})]),e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#truthy"},{default:n(()=>[t("truthy")]),_:1})])]),g,e("ul",null,[e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#compile"},{default:n(()=>[t("compile")]),_:1})]),e("li",null,[l(o,{to:"/api/classes/TernaryExpressionToken.html#compilewrap"},{default:n(()=>[t("compileWrap")]),_:1})])]),k,e("table",null,[C,e("tbody",null,[e("tr",null,[b,e("td",E,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[w]),_:1})]),v]),e("tr",null,[R,e("td",N,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[P]),_:1})]),I]),e("tr",null,[O,e("td",V,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[W]),_:1})]),B]),D,L])]),M,e("p",null,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),l(o,{to:"/api/classes/CompilerToken.html#constructor"},{default:n(()=>[t("constructor")]),_:1})]),S,e("p",null,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),l(o,{to:"/api/classes/CompilerToken.html#column"},{default:n(()=>[t("column")]),_:1})]),A,F,e("p",null,[t("• "),H,t(),j,t(": "),l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[q]),_:1})]),z,G,J,K,Q,e("p",null,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),l(o,{to:"/api/classes/CompilerToken.html#line"},{default:n(()=>[t("line")]),_:1})]),U,X,e("p",null,[t("• "),Y,t(),Z,t(": "),l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[$]),_:1})]),ee,te,oe,le,ne,e("p",null,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),l(o,{to:"/api/classes/CompilerToken.html#text"},{default:n(()=>[t("text")]),_:1})]),se,ae,e("p",null,[t("• "),re,t(),ie,t(": "),l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[de]),_:1})]),he,e("table",null,[ce,e("tbody",null,[e("tr",null,[ue,e("td",pe,[l(o,{to:"/api/classes/CompilerContext.html"},{default:n(()=>[_e]),_:1})]),fe])])]),me,xe,ye,e("p",null,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),l(o,{to:"/api/classes/CompilerToken.html#compile"},{default:n(()=>[t("compile")]),_:1})]),Te,e("table",null,[ge,e("tbody",null,[e("tr",null,[ke,e("td",Ce,[l(o,{to:"/api/classes/CompilerContext.html"},{default:n(()=>[be]),_:1})]),Ee]),we])]),ve,Re,Ne,e("p",null,[l(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),l(o,{to:"/api/classes/CompilerToken.html#compilewrap"},{default:n(()=>[t("compileWrap")]),_:1})])])}const Be=a(h,[["render",Pe],["__file","TernaryExpressionToken.html.vue"]]);export{Be as default};
