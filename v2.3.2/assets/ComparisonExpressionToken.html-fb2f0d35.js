import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c as d,a as e,d as n,w as l,b as t,e as s}from"./app-b6726c48.js";const h={},c=s('<h1 id="class-comparisonexpressiontoken" tabindex="-1"><a class="header-anchor" href="#class-comparisonexpressiontoken" aria-hidden="true">#</a> Class: ComparisonExpressionToken</h1><p>Represents a comparison expression.</p><p>It must consist of two expressions separated by a comparison operator.</p><p>Examples: <code>a == b</code><code>a != b</code><code>a &gt; b</code><code>a &lt; b</code><code>a &gt;= b</code><code>a &lt;= b</code><code>a === b</code><code>a !== b</code></p><h2 id="hierarchy" tabindex="-1"><a class="header-anchor" href="#hierarchy" aria-hidden="true">#</a> Hierarchy</h2>',5),p=e("code",null,"CompilerToken",-1),u=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"ComparisonExpressionToken")])],-1),_=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),m=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),t(" Constructors")],-1),f=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),x=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),g=s('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new ComparisonExpressionToken</strong>(<code>left</code>, <code>right</code>, <code>operator</code>, <code>text</code>, <code>location</code>)</p><p>Creates a new instance.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4>',5),C=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),T=e("td",{style:{"text-align":"left"}},[e("code",null,"left")],-1),b={style:{"text-align":"left"}},k=e("code",null,"CompilerToken",-1),y=e("td",{style:{"text-align":"left"}},"The left-hand side of the expression.",-1),E=e("td",{style:{"text-align":"left"}},[e("code",null,"right")],-1),w={style:{"text-align":"left"}},v=e("code",null,"CompilerToken",-1),R=e("td",{style:{"text-align":"left"}},"The right-hand side of the expression.",-1),N=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"operator")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The comparison operator.")],-1),P=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"text")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The full text (content) of the expression.")],-1),I=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"location")]),e("td",{style:{"text-align":"left"}},[e("code",null,"LocationRange")]),e("td",{style:{"text-align":"left"}},"The location of the invocation within the source code.")],-1),O=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides","aria-hidden":"true"},"#"),t(" Overrides")],-1),V=s('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> column</h3><p>• <strong>column</strong>: <code>number</code></p><p>The column number of the expression within the translation message.</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from" aria-hidden="true">#</a> Inherited from</h4>',5),W=e("hr",null,null,-1),B=e("h3",{id:"left",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#left","aria-hidden":"true"},"#"),t(" left")],-1),D=e("code",null,"Readonly",-1),L=e("strong",null,"left",-1),M=e("code",null,"CompilerToken",-1),S=e("hr",null,null,-1),A=e("h3",{id:"line",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#line","aria-hidden":"true"},"#"),t(" line")],-1),F=e("p",null,[t("• "),e("strong",null,"line"),t(": "),e("code",null,"number")],-1),H=e("p",null,"The line number of the expression within the translation message.",-1),j=e("h4",{id:"inherited-from-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-1","aria-hidden":"true"},"#"),t(" Inherited from")],-1),q=s('<hr><h3 id="operator" tabindex="-1"><a class="header-anchor" href="#operator" aria-hidden="true">#</a> operator</h3><p>• <code>Readonly</code> <strong>operator</strong>: <code>string</code></p><hr><h3 id="right" tabindex="-1"><a class="header-anchor" href="#right" aria-hidden="true">#</a> right</h3>',5),z=e("code",null,"Readonly",-1),G=e("strong",null,"right",-1),J=e("code",null,"CompilerToken",-1),K=e("hr",null,null,-1),Q=e("h3",{id:"text",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#text","aria-hidden":"true"},"#"),t(" text")],-1),U=e("p",null,[t("• "),e("strong",null,"text"),t(": "),e("code",null,"string")],-1),X=e("p",null,"The full text (content) of the expression.",-1),Y=e("h4",{id:"inherited-from-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-2","aria-hidden":"true"},"#"),t(" Inherited from")],-1),Z=s('<h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile</h3><p>▸ <strong>compile</strong>(<code>context</code>): <code>string</code></p><p>Compiles the expression into an executable ECMAScript6 string.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>',5),$=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),ee=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),te={style:{"text-align":"left"}},oe=e("code",null,"CompilerContext",-1),ne=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),le=e("h4",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns","aria-hidden":"true"},"#"),t(" Returns")],-1),se=e("p",null,[e("code",null,"string")],-1),ae=e("h4",{id:"overrides-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-1","aria-hidden":"true"},"#"),t(" Overrides")],-1),ie=s('<hr><h3 id="compilewrap" tabindex="-1"><a class="header-anchor" href="#compilewrap" aria-hidden="true">#</a> compileWrap</h3><p>▸ <code>Protected</code> <strong>compileWrap</strong>(<code>context</code>, <code>instanceOfs</code>): <code>string</code></p><p>Same as <code>compile()</code> except that it wraps the compiled expression in parentheses if the current token is an instance of the specified types.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',5),re=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),de=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),he={style:{"text-align":"left"}},ce=e("code",null,"CompilerContext",-1),pe=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),ue=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"instanceOfs")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Function"),t("[]")]),e("td",{style:{"text-align":"left"}},"The types to check for.")],-1),_e=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1","aria-hidden":"true"},"#"),t(" Returns")],-1),me=e("p",null,[e("code",null,"string")],-1),fe=e("h4",{id:"inherited-from-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-3","aria-hidden":"true"},"#"),t(" Inherited from")],-1);function xe(ge,Ce){const o=i("RouterLink");return r(),d("div",null,[c,e("ul",null,[e("li",null,[e("p",null,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[p]),_:1})]),u])]),_,m,e("ul",null,[e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#constructor"},{default:l(()=>[t("constructor")]),_:1})])]),f,e("ul",null,[e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#column"},{default:l(()=>[t("column")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#left"},{default:l(()=>[t("left")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#line"},{default:l(()=>[t("line")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#operator"},{default:l(()=>[t("operator")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#right"},{default:l(()=>[t("right")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#text"},{default:l(()=>[t("text")]),_:1})])]),x,e("ul",null,[e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#compile"},{default:l(()=>[t("compile")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/ComparisonExpressionToken.html#compilewrap"},{default:l(()=>[t("compileWrap")]),_:1})])]),g,e("table",null,[C,e("tbody",null,[e("tr",null,[T,e("td",b,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[k]),_:1})]),y]),e("tr",null,[E,e("td",w,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[v]),_:1})]),R]),N,P,I])]),O,e("p",null,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[t("CompilerToken")]),_:1}),t("."),n(o,{to:"/api/classes/CompilerToken.html#constructor"},{default:l(()=>[t("constructor")]),_:1})]),V,e("p",null,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[t("CompilerToken")]),_:1}),t("."),n(o,{to:"/api/classes/CompilerToken.html#column"},{default:l(()=>[t("column")]),_:1})]),W,B,e("p",null,[t("• "),D,t(),L,t(": "),n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[M]),_:1})]),S,A,F,H,j,e("p",null,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[t("CompilerToken")]),_:1}),t("."),n(o,{to:"/api/classes/CompilerToken.html#line"},{default:l(()=>[t("line")]),_:1})]),q,e("p",null,[t("• "),z,t(),G,t(": "),n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[J]),_:1})]),K,Q,U,X,Y,e("p",null,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[t("CompilerToken")]),_:1}),t("."),n(o,{to:"/api/classes/CompilerToken.html#text"},{default:l(()=>[t("text")]),_:1})]),Z,e("table",null,[$,e("tbody",null,[e("tr",null,[ee,e("td",te,[n(o,{to:"/api/classes/CompilerContext.html"},{default:l(()=>[oe]),_:1})]),ne])])]),le,se,ae,e("p",null,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[t("CompilerToken")]),_:1}),t("."),n(o,{to:"/api/classes/CompilerToken.html#compile"},{default:l(()=>[t("compile")]),_:1})]),ie,e("table",null,[re,e("tbody",null,[e("tr",null,[de,e("td",he,[n(o,{to:"/api/classes/CompilerContext.html"},{default:l(()=>[ce]),_:1})]),pe]),ue])]),_e,me,fe,e("p",null,[n(o,{to:"/api/classes/CompilerToken.html"},{default:l(()=>[t("CompilerToken")]),_:1}),t("."),n(o,{to:"/api/classes/CompilerToken.html#compilewrap"},{default:l(()=>[t("compileWrap")]),_:1})])])}const ke=a(h,[["render",xe],["__file","ComparisonExpressionToken.html.vue"]]);export{ke as default};
