import TextToken from"./TextToken.mjs";import CompilerContext from"./CompilerContext.mjs";import TernaryExpressionToken from"./TernaryExpressionToken.mjs";import ComparisonExpressionToken from"./ComparisonExpressionToken.mjs";import CompilerOptions from"./CompilerOptions.mjs";import parse from"./peg.mjs";export default class Compiler{constructor(o={}){this.options=o instanceof CompilerOptions?o:new CompilerOptions(o)}tokenize(o){var e=[];for(const n of parse(o))0<e.length&&n instanceof TextToken&&e[e.length-1]instanceof TextToken?e[e.length-1].text+=n.text:e.push(n);return e}compile(o){this.options.logger.log(`Compiling: ${o}.`);var e=new CompilerContext,n=['""'];for(const i of this.tokenize(o)){var t=i instanceof TernaryExpressionToken||i instanceof ComparisonExpressionToken,r=i.compile(e);n.push(t?`(${r})`:r)}for(let o=0;o<n.length;o++)["null","true","false"].includes(n[o])&&(n[o]='""');for(let o=1;o<n.length;o++)n[o-1].startsWith('"')&&n[o-1].endsWith('"')&&n[o].startsWith('"')&&(n[o-1]=n[o-1].slice(0,-1)+n[o].slice(1),n.splice(o,1),o--);let s="";return 0<e.parameters.length&&(s+=`{${e.parameters.join(",")}}`),0<e.globals.length&&(0===e.parameters.length&&(s+="_"),s+=`,{${e.globals.join(",")}}`),""===s?n.join("+"):`(${s})=>`+n.join("+")}}