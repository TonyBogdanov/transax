import Logger from"../Logger/Logger";import TextCompilerToken from"./TextCompilerToken";import CompilerContext from"./CompilerContext";import parse from"./peg";class Options{constructor(e={}){this.logger=null!=(e=e.logger)?e:new Logger({namespace:"TRANSAX:COMPILER"})}}export default class Compiler{constructor(e={}){this.options=new Options(e)}tokenize(e){var t=[];for(const o of parse(e))0<t.length&&o instanceof TextCompilerToken&&t[t.length-1]instanceof TextCompilerToken?t[t.length-1].text+=o.text:t.push(o);return t}compile(e){var t=new CompilerContext,o=['""'];for(const n of this.tokenize(e)){const e=n.compile(t);""!==e&&o.push(e)}for(let e=0;e<o.length;e++)["null","true","false"].includes(o[e])&&(o[e]='""');for(let e=1;e<o.length;e++)o[e-1].startsWith('"')&&o[e-1].endsWith('"')&&o[e].startsWith('"')&&(o[e-1]=o[e-1].slice(0,-1)+o[e].slice(1),o.splice(e,1),e--);let r="";return 0<t.parameters.length&&(r+=`{${t.parameters.join(",")}}`),0<t.globals.length&&(0===t.parameters.length&&(r+="_"),r+=`,{${t.globals.join(",")}}`),`(${r})=>`+o.join("+")}}