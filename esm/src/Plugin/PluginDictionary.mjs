var __awaiter=this&&this.__awaiter||function(t,i,l,h){return new(l=l||Promise)(function(e,r){function n(t){try{o(h.next(t))}catch(t){r(t)}}function a(t){try{o(h.throw(t))}catch(t){r(t)}}function o(t){var r;t.done?e(t.value):((r=t.value)instanceof l?r:new l(function(t){t(r)})).then(n,a)}o((h=h.apply(t,i||[])).next())})};import{readFile}from"node:fs/promises";import{parse as parseYaml}from"yaml";import Util from"./Util.mjs";import PathError from"../Util/PathError.mjs";export default class PluginDictionary{constructor(t){if(!t||"object"!=typeof t)throw new PathError("Expected {{ path }} to be an object.");this.pattern=PathError.wrap("pattern",()=>{if("string"==typeof t.pattern&&0<t.pattern.length)return[t.pattern];if(Array.isArray(t.pattern)&&0<t.pattern.filter(t=>0<t.length).length)return t.pattern.filter(t=>0<t.length);throw new PathError("Expected {{ path }} to be a non-empty string or an array of non-empty strings.")}),this.handler=PathError.wrap("handler",()=>{if("json"===t.handler)return t=>__awaiter(this,void 0,void 0,function*(){return{[Util.localeFromPath(t)]:JSON.parse(yield readFile(t,"utf8"))}});if("yaml"===t.handler)return t=>__awaiter(this,void 0,void 0,function*(){return{[Util.localeFromPath(t)]:parseYaml(yield readFile(t,"utf8"))}});if("function"==typeof t.handler)return t.handler;throw new PathError('Expected {{ path }} to be "yaml", "json" or a function.')})}}