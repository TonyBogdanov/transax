import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as n,o,c as l,a as i,b as e,d as r,w as s,e as d}from"./app-l-37dSRN.js";const c={},p=d(`<h1 id="interpolation" tabindex="-1"><a class="header-anchor" href="#interpolation"><span>Interpolation</span></a></h1><p>When translating your application your dictionary will most likely contain placeholders you would want to be evaluated and replaced with the actual value at runtime.</p><p>A placeholder is any valid expression wrapped by double curly braces: <code>{{</code> and <code>}}</code>:</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>Hello {{ name }}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Here, <code>Hello </code> is considered plain (static) text and the rest a placeholder with <code>name</code> as its expression.</p><p>When translating this string, the expression <code>name</code> will be evaluated and the result will be inserted in place of the placeholder.</p>`,6);function h(u,m){const t=n("RouterLink");return o(),l("div",null,[p,i("p",null,[e("Expressions (the thing between the curly braces) must follow "),r(t,{to:"/usage/syntax.html"},{default:s(()=>[e("strict syntax rules")]),_:1}),e(". If the expression is invalid, the entire placeholder will be treated as plain text instead (no error is thrown).")])])}const b=a(c,[["render",h],["__file","interpolation.html.vue"]]);export{b as default};
