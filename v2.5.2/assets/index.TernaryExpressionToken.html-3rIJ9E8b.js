import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c as d,a as e,d as l,w as s,b as t,e as o}from"./app-mwHMx-kE.js";const c={},h=e("h1",{id:"class-ternaryexpressiontoken",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-ternaryexpressiontoken"},[e("span",null,"Class: TernaryExpressionToken")])],-1),p=e("p",null,"Represents a ternary expression that returns the result of the truthy expression if the test expression returns a truthy value, or the result of the falsy expression otherwise.",-1),u=e("p",null,[t("Examples: "),e("code",null,"a ? b : c"),e("code",null,"( 0 < 1 ) ? b : c")],-1),_=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy"},[e("span",null,"Hierarchy")])],-1),x=e("code",null,"CompilerToken",-1),f=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"TernaryExpressionToken")])],-1),m=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents"},[e("span",null,"Table of contents")])],-1),y=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors"},[e("span",null,"Constructors")])],-1),T=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties"},[e("span",null,"Properties")])],-1),k=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods"},[e("span",null,"Methods")])],-1),g=e("h2",{id:"constructors-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors-1"},[e("span",null,"Constructors")])],-1),C=e("h3",{id:"constructor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructor"},[e("span",null,"constructor")])],-1),b=e("strong",null,"new TernaryExpressionToken",-1),E=e("code",null,"test",-1),w=e("code",null,"truthy",-1),v=e("code",null,"falsy",-1),R=e("code",null,"text",-1),N=e("code",null,"location",-1),P=e("code",null,"TernaryExpressionToken",-1),I=e("p",null,"Creates a new instance.",-1),O=e("h4",{id:"parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters"},[e("span",null,"Parameters")])],-1),V=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),W=e("td",{style:{"text-align":"left"}},[e("code",null,"test")],-1),B={style:{"text-align":"left"}},D=e("code",null,"CompilerToken",-1),L=e("td",{style:{"text-align":"left"}},"The test expression.",-1),M=e("td",{style:{"text-align":"left"}},[e("code",null,"truthy")],-1),S={style:{"text-align":"left"}},A=e("code",null,"CompilerToken",-1),F=e("td",{style:{"text-align":"left"}},"The truthy expression.",-1),H=e("td",{style:{"text-align":"left"}},[e("code",null,"falsy")],-1),j={style:{"text-align":"left"}},q=e("code",null,"CompilerToken",-1),z=e("td",{style:{"text-align":"left"}},"The falsy expression.",-1),G=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"text")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The full text (content) of the expression.")],-1),J=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"location")]),e("td",{style:{"text-align":"left"}},[e("code",null,"LocationRange")]),e("td",{style:{"text-align":"left"}},"The location of the invocation within the source code.")],-1),K=e("h4",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns"},[e("span",null,"Returns")])],-1),Q=e("code",null,"TernaryExpressionToken",-1),U=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides"},[e("span",null,"Overrides")])],-1),X=o('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1"><span>Properties</span></a></h2><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column"><span>column</span></a></h3><p>• <strong>column</strong>: <code>number</code></p><p>The column number of the expression within the translation message.</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from"><span>Inherited from</span></a></h4>',5),Y=e("hr",null,null,-1),Z=e("h3",{id:"falsy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#falsy"},[e("span",null,"falsy")])],-1),$=e("code",null,"Readonly",-1),ee=e("strong",null,"falsy",-1),te=e("code",null,"CompilerToken",-1),ne=e("hr",null,null,-1),le=e("h3",{id:"line",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#line"},[e("span",null,"line")])],-1),se=e("p",null,[t("• "),e("strong",null,"line"),t(": "),e("code",null,"number")],-1),oe=e("p",null,"The line number of the expression within the translation message.",-1),ae=e("h4",{id:"inherited-from-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-1"},[e("span",null,"Inherited from")])],-1),ie=e("hr",null,null,-1),re=e("h3",{id:"test",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#test"},[e("span",null,"test")])],-1),de=e("code",null,"Readonly",-1),ce=e("strong",null,"test",-1),he=e("code",null,"CompilerToken",-1),pe=e("hr",null,null,-1),ue=e("h3",{id:"text",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#text"},[e("span",null,"text")])],-1),_e=e("p",null,[t("• "),e("strong",null,"text"),t(": "),e("code",null,"string")],-1),xe=e("p",null,"The full text (content) of the expression.",-1),fe=e("h4",{id:"inherited-from-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-2"},[e("span",null,"Inherited from")])],-1),me=e("hr",null,null,-1),ye=e("h3",{id:"truthy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#truthy"},[e("span",null,"truthy")])],-1),Te=e("code",null,"Readonly",-1),ke=e("strong",null,"truthy",-1),ge=e("code",null,"CompilerToken",-1),Ce=o('<h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h2><h3 id="compile" tabindex="-1"><a class="header-anchor" href="#compile"><span>compile</span></a></h3><p>▸ <strong>compile</strong>(<code>context</code>): <code>string</code></p><p>Compiles the expression into an executable ECMAScript6 string.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4>',5),be=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),Ee=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),we={style:{"text-align":"left"}},ve=e("code",null,"CompilerContext",-1),Re=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),Ne=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1"},[e("span",null,"Returns")])],-1),Pe=e("p",null,[e("code",null,"string")],-1),Ie=e("h4",{id:"overrides-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-1"},[e("span",null,"Overrides")])],-1),Oe=o('<hr><h3 id="compilewrap" tabindex="-1"><a class="header-anchor" href="#compilewrap"><span>compileWrap</span></a></h3><p>▸ <strong>compileWrap</strong>(<code>context</code>, <code>instanceOfs</code>): <code>string</code></p><p>Same as <code>compile()</code> except that it wraps the compiled expression in parentheses if the current token is an instance of the specified types.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4>',5),Ve=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),We=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),Be={style:{"text-align":"left"}},De=e("code",null,"CompilerContext",-1),Le=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),Me=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"instanceOfs")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Function"),t("[]")]),e("td",{style:{"text-align":"left"}},"The types to check for.")],-1),Se=e("h4",{id:"returns-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-2"},[e("span",null,"Returns")])],-1),Ae=e("p",null,[e("code",null,"string")],-1),Fe=e("h4",{id:"inherited-from-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-3"},[e("span",null,"Inherited from")])],-1);function He(je,qe){const n=i("RouterLink");return r(),d("div",null,[h,e("p",null,[l(n,{to:"/api/modules/"},{default:s(()=>[t("index")]),_:1}),t(".TernaryExpressionToken")]),p,u,_,e("ul",null,[e("li",null,[e("p",null,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[x]),_:1})]),f])]),m,y,e("ul",null,[e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#constructor"},{default:s(()=>[t("constructor")]),_:1})])]),T,e("ul",null,[e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#column"},{default:s(()=>[t("column")]),_:1})]),e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#falsy"},{default:s(()=>[t("falsy")]),_:1})]),e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#line"},{default:s(()=>[t("line")]),_:1})]),e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#test"},{default:s(()=>[t("test")]),_:1})]),e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#text"},{default:s(()=>[t("text")]),_:1})]),e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#truthy"},{default:s(()=>[t("truthy")]),_:1})])]),k,e("ul",null,[e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#compile"},{default:s(()=>[t("compile")]),_:1})]),e("li",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html#compilewrap"},{default:s(()=>[t("compileWrap")]),_:1})])]),g,C,e("p",null,[t("• "),b,t("("),E,t(", "),w,t(", "),v,t(", "),R,t(", "),N,t("): "),l(n,{to:"/api/classes/index.TernaryExpressionToken.html"},{default:s(()=>[P]),_:1})]),I,O,e("table",null,[V,e("tbody",null,[e("tr",null,[W,e("td",B,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[D]),_:1})]),L]),e("tr",null,[M,e("td",S,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[A]),_:1})]),F]),e("tr",null,[H,e("td",j,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[q]),_:1})]),z]),G,J])]),K,e("p",null,[l(n,{to:"/api/classes/index.TernaryExpressionToken.html"},{default:s(()=>[Q]),_:1})]),U,e("p",null,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[t("CompilerToken")]),_:1}),t("."),l(n,{to:"/api/classes/index.CompilerToken.html#constructor"},{default:s(()=>[t("constructor")]),_:1})]),X,e("p",null,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[t("CompilerToken")]),_:1}),t("."),l(n,{to:"/api/classes/index.CompilerToken.html#column"},{default:s(()=>[t("column")]),_:1})]),Y,Z,e("p",null,[t("• "),$,t(),ee,t(": "),l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[te]),_:1})]),ne,le,se,oe,ae,e("p",null,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[t("CompilerToken")]),_:1}),t("."),l(n,{to:"/api/classes/index.CompilerToken.html#line"},{default:s(()=>[t("line")]),_:1})]),ie,re,e("p",null,[t("• "),de,t(),ce,t(": "),l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[he]),_:1})]),pe,ue,_e,xe,fe,e("p",null,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[t("CompilerToken")]),_:1}),t("."),l(n,{to:"/api/classes/index.CompilerToken.html#text"},{default:s(()=>[t("text")]),_:1})]),me,ye,e("p",null,[t("• "),Te,t(),ke,t(": "),l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[ge]),_:1})]),Ce,e("table",null,[be,e("tbody",null,[e("tr",null,[Ee,e("td",we,[l(n,{to:"/api/classes/index.CompilerContext.html"},{default:s(()=>[ve]),_:1})]),Re])])]),Ne,Pe,Ie,e("p",null,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[t("CompilerToken")]),_:1}),t("."),l(n,{to:"/api/classes/index.CompilerToken.html#compile"},{default:s(()=>[t("compile")]),_:1})]),Oe,e("table",null,[Ve,e("tbody",null,[e("tr",null,[We,e("td",Be,[l(n,{to:"/api/classes/index.CompilerContext.html"},{default:s(()=>[De]),_:1})]),Le]),Me])]),Se,Ae,Fe,e("p",null,[l(n,{to:"/api/classes/index.CompilerToken.html"},{default:s(()=>[t("CompilerToken")]),_:1}),t("."),l(n,{to:"/api/classes/index.CompilerToken.html#compilewrap"},{default:s(()=>[t("compileWrap")]),_:1})])])}const Je=a(c,[["render",He],["__file","index.TernaryExpressionToken.html.vue"]]);export{Je as default};
