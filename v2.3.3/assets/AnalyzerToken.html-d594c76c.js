import{_ as d}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as s,a as e,d as a,w as n,e as r,b as t}from"./app-5d5007a5.js";const i={},h=r('<h1 id="class-analyzertoken" tabindex="-1"><a class="header-anchor" href="#class-analyzertoken" aria-hidden="true">#</a> Class: AnalyzerToken</h1><p>A class representing a single translation invocation within some source code.</p><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a> Table of contents</h2><h3 id="constructors" tabindex="-1"><a class="header-anchor" href="#constructors" aria-hidden="true">#</a> Constructors</h3>',4),u=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),f=r('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <strong>new AnalyzerToken</strong>(<code>name</code>, <code>key</code>, <code>text</code>, <code>location</code>, <code>source?</code>)</p><p>Creates a new instance.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The name of the invoked translation function, e.g. <code>$t</code>.</td></tr><tr><td style="text-align:left;"><code>key</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The key of the translation, e.g. <code>Hello world!</code>.</td></tr><tr><td style="text-align:left;"><code>text</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The full text of the invocation, e.g. <code>$t( &#39;Hello world!&#39; )</code>.</td></tr><tr><td style="text-align:left;"><code>location</code></td><td style="text-align:left;"><code>LocationRange</code></td><td style="text-align:left;">The location of the invocation within the source code.</td></tr><tr><td style="text-align:left;"><code>source?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The origin of the source code, usually a path to the source file.</td></tr></tbody></table><h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> column</h3><p>• <code>Readonly</code> <strong>column</strong>: <code>number</code></p><p>The column number of the invocation within the source code.</p><hr><h3 id="key" tabindex="-1"><a class="header-anchor" href="#key" aria-hidden="true">#</a> key</h3><p>• <code>Readonly</code> <strong>key</strong>: <code>string</code></p><p>The key of the translation, e.g. <code>Hello world!</code>.</p><hr><h3 id="line" tabindex="-1"><a class="header-anchor" href="#line" aria-hidden="true">#</a> line</h3><p>• <code>Readonly</code> <strong>line</strong>: <code>number</code></p><p>The line number of the invocation within the source code.</p><hr><h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>• <code>Readonly</code> <strong>name</strong>: <code>string</code></p><p>The name of the invoked translation function, e.g. <code>$t</code>.</p><hr><h3 id="source" tabindex="-1"><a class="header-anchor" href="#source" aria-hidden="true">#</a> source</h3><p>• <code>Optional</code> <code>Readonly</code> <strong>source</strong>: <code>string</code></p><p>The origin of the source code, usually a path to the source file.</p><hr><h3 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text</h3><p>• <code>Readonly</code> <strong>text</strong>: <code>string</code></p><p>The full text of the invocation, e.g. <code>$t( &#39;Hello world!&#39; )</code>.</p>',30);function p(y,g){const o=l("RouterLink");return c(),s("div",null,[h,e("ul",null,[e("li",null,[a(o,{to:"/api/classes/AnalyzerToken.html#constructor"},{default:n(()=>[t("constructor")]),_:1})])]),u,e("ul",null,[e("li",null,[a(o,{to:"/api/classes/AnalyzerToken.html#column"},{default:n(()=>[t("column")]),_:1})]),e("li",null,[a(o,{to:"/api/classes/AnalyzerToken.html#key"},{default:n(()=>[t("key")]),_:1})]),e("li",null,[a(o,{to:"/api/classes/AnalyzerToken.html#line"},{default:n(()=>[t("line")]),_:1})]),e("li",null,[a(o,{to:"/api/classes/AnalyzerToken.html#name"},{default:n(()=>[t("name")]),_:1})]),e("li",null,[a(o,{to:"/api/classes/AnalyzerToken.html#source"},{default:n(()=>[t("source")]),_:1})]),e("li",null,[a(o,{to:"/api/classes/AnalyzerToken.html#text"},{default:n(()=>[t("text")]),_:1})])]),f])}const k=d(i,[["render",p],["__file","AnalyzerToken.html.vue"]]);export{k as default};
