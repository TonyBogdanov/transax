import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as d,c,a as t,d as n,w as o,b as e,e as a}from"./app-t0fXQE-E.js";const p={},r=a('<h1 id="api-reference" tabindex="-1"><a class="header-anchor" href="#api-reference"><span>API Reference</span></a></h1><h2 id="table-of-contents" tabindex="-1"><a class="header-anchor" href="#table-of-contents"><span>Table of contents</span></a></h2><h3 id="classes" tabindex="-1"><a class="header-anchor" href="#classes"><span>Classes</span></a></h3>',3),u=t("h3",{id:"interfaces",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#interfaces"},[t("span",null,"Interfaces")])],-1),h=t("h3",{id:"type-aliases",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-aliases"},[t("span",null,"Type Aliases")])],-1),y=t("h3",{id:"functions",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#functions"},[t("span",null,"Functions")])],-1),_=t("h2",{id:"type-aliases-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-aliases-1"},[t("span",null,"Type Aliases")])],-1),f=t("h3",{id:"analyzeroptionstype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#analyzeroptionstype"},[t("span",null,"AnalyzerOptionsType")])],-1),g=t("p",null,[e("Ƭ "),t("strong",null,"AnalyzerOptionsType"),e(": "),t("code",null,"Object")],-1),x=t("h4",{id:"type-declaration",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration"},[t("span",null,"Type declaration")])],-1),m=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),T=t("td",{style:{"text-align":"left"}},[t("code",null,"keyFormatter?")],-1),b={style:{"text-align":"left"}},O=t("code",null,"KeyFormatterType",-1),k=t("td",{style:{"text-align":"left"}},[e("A function to format the translation key based on the context. Defaults to "),t("code",null,"( key => key )"),e(".")],-1),v=t("td",{style:{"text-align":"left"}},[t("code",null,"logger?")],-1),C={style:{"text-align":"left"}},A=t("code",null,"LoggerInterface",-1),P=t("code",null,"LoggerOptionsType",-1),D=t("td",{style:{"text-align":"left"}},[e("Optional logger instance. Defaults to "),t("code",null,"new Logger( { namespace: 'TRANSAX:ANALYZER' } )"),e(".")],-1),L=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"names?")]),t("td",{style:{"text-align":"left"}},[t("code",null,"string"),e("[] | "),t("code",null,"string")]),t("td",{style:{"text-align":"left"}},[e("The name(s) of the function(s) to analyze. Defaults to "),t("code",null,"[ '$t' ]"),e(".")])],-1),I=t("hr",null,null,-1),z=t("h3",{id:"catalogtype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#catalogtype"},[t("span",null,"CatalogType")])],-1),S=t("strong",null,"CatalogType",-1),N=t("code",null,"Record",-1),w=t("code",null,"LocaleType",-1),j=t("code",null,"DictionaryType",-1),E=a(`<p>Catalog of translation entries, keyed by locale.</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;en_US&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;my.translation.key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello there, nice to meet you!&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="compiledcatalogtype" tabindex="-1"><a class="header-anchor" href="#compiledcatalogtype"><span>CompiledCatalogType</span></a></h3>`,5),R=t("strong",null,"CompiledCatalogType",-1),G=t("code",null,"Record",-1),q=t("code",null,"LocaleType",-1),V=t("code",null,"CompiledDictionaryType",-1),F=t("hr",null,null,-1),K=t("h3",{id:"compileddictionarytype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#compileddictionarytype"},[t("span",null,"CompiledDictionaryType")])],-1),H=t("strong",null,"CompiledDictionaryType",-1),X=t("code",null,"Record",-1),B=t("code",null,"KeyType",-1),Y=t("code",null,"CompiledValueType",-1),M=t("hr",null,null,-1),U=t("h3",{id:"compiledvaluetype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#compiledvaluetype"},[t("span",null,"CompiledValueType")])],-1),$=t("strong",null,"CompiledValueType",-1),Z=t("code",null,"params",-1),J=t("code",null,"ContextParamsType",-1),Q=t("code",null,"globals",-1),W=t("code",null,"ContextGlobalsType",-1),tt=t("code",null,"string",-1),et=t("code",null,"string",-1),lt=t("hr",null,null,-1),nt=t("h3",{id:"compileroptionstype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#compileroptionstype"},[t("span",null,"CompilerOptionsType")])],-1),ot=t("p",null,[e("Ƭ "),t("strong",null,"CompilerOptionsType"),e(": "),t("code",null,"Object")],-1),at=t("h4",{id:"type-declaration-1",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-1"},[t("span",null,"Type declaration")])],-1),st=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),it=t("td",{style:{"text-align":"left"}},[t("code",null,"logger?")],-1),dt={style:{"text-align":"left"}},ct=t("code",null,"LoggerInterface",-1),pt=t("code",null,"LoggerOptionsType",-1),rt=t("td",{style:{"text-align":"left"}},[e("Optional logger instance. Defaults to "),t("code",null,"new Logger( { namespace: 'TRANSAX:COMPILER' } )"),e(".")],-1),ut=a('<hr><h3 id="contextglobalstype" tabindex="-1"><a class="header-anchor" href="#contextglobalstype"><span>ContextGlobalsType</span></a></h3><p>Ƭ <strong>ContextGlobalsType</strong>: <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>Hashmap of context globals to be used during translation.</p><hr><h3 id="contextparamstype" tabindex="-1"><a class="header-anchor" href="#contextparamstype"><span>ContextParamsType</span></a></h3><p>Ƭ <strong>ContextParamsType</strong>: <code>Record</code>&lt;<code>string</code>, <code>any</code>&gt;</p><p>Hashmap of context parameters to be used during translation.</p><hr><h3 id="contexttype" tabindex="-1"><a class="header-anchor" href="#contexttype"><span>ContextType</span></a></h3><p>Ƭ <strong>ContextType</strong>: <code>Object</code></p><p>Runtime context to be used during translation.</p><h4 id="type-declaration-2" tabindex="-1"><a class="header-anchor" href="#type-declaration-2"><span>Type declaration</span></a></h4>',13),ht=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),yt=t("td",{style:{"text-align":"left"}},[t("code",null,"globals?")],-1),_t={style:{"text-align":"left"}},ft=t("code",null,"ContextGlobalsType",-1),gt=t("td",{style:{"text-align":"left"}},"Hashmap of globals available to translation expressions.",-1),xt=t("td",{style:{"text-align":"left"}},[t("code",null,"locale?")],-1),mt={style:{"text-align":"left"}},Tt=t("code",null,"LocaleType",-1),bt=t("td",{style:{"text-align":"left"}},"The locale to translate to. If not specified, the default locale specified in the translator options will be used.",-1),Ot=t("td",{style:{"text-align":"left"}},[t("code",null,"params?")],-1),kt={style:{"text-align":"left"}},vt=t("code",null,"ContextParamsType",-1),Ct=t("td",{style:{"text-align":"left"}},"Hashmap of parameters available to translation expressions.",-1),At=t("hr",null,null,-1),Pt=t("h3",{id:"dictionarytype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#dictionarytype"},[t("span",null,"DictionaryType")])],-1),Dt=t("strong",null,"DictionaryType",-1),Lt=t("code",null,"Record",-1),It=t("code",null,"KeyType",-1),zt=t("code",null,"ValueType",-1),St=a(`<p>Translation dictionary as a hashmap of key-value pairs.</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token punctuation">{</span> <span class="token string-property property">&quot;my.translation.key&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Hello there, nice to meet you!&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="generatoroptionstype" tabindex="-1"><a class="header-anchor" href="#generatoroptionstype"><span>GeneratorOptionsType</span></a></h3><p>Ƭ <strong>GeneratorOptionsType</strong>: <code>Object</code></p>`,6),Nt=t("h4",{id:"type-declaration-3",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-3"},[t("span",null,"Type declaration")])],-1),wt=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),jt=t("td",{style:{"text-align":"left"}},[t("code",null,"analyzer?")],-1),Et={style:{"text-align":"left"}},Rt=t("code",null,"AnalyzerInterface",-1),Gt=t("code",null,"AnalyzerOptionsType",-1),qt=t("td",{style:{"text-align":"left"}},[e("Optional analyzer instance. Defaults to "),t("code",null,"new Analyzer()"),e(".")],-1),Vt=t("td",{style:{"text-align":"left"}},[t("code",null,"compiler?")],-1),Ft={style:{"text-align":"left"}},Kt=t("code",null,"CompilerInterface",-1),Ht=t("code",null,"CompilerOptionsType",-1),Xt=t("td",{style:{"text-align":"left"}},[e("Optional compiler instance. Defaults to "),t("code",null,"new Compiler()"),e(".")],-1),Bt=t("td",{style:{"text-align":"left"}},[t("code",null,"logger?")],-1),Yt={style:{"text-align":"left"}},Mt=t("code",null,"LoggerInterface",-1),Ut=t("code",null,"LoggerOptionsType",-1),$t=t("td",{style:{"text-align":"left"}},[e("Optional logger instance. Defaults to "),t("code",null,"new Logger( { namespace: 'TRANSAX:GENERATOR' } )"),e(".")],-1),Zt=t("td",{style:{"text-align":"left"}},[t("code",null,"translations?")],-1),Jt={style:{"text-align":"left"}},Qt=t("code",null,"CatalogType",-1),Wt=t("td",{style:{"text-align":"left"}},[e("Optional translation catalog. Defaults to "),t("code",null,"{}"),e(".")],-1),te=t("hr",null,null,-1),ee=t("h3",{id:"keyformattertype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#keyformattertype"},[t("span",null,"KeyFormatterType")])],-1),le=t("strong",null,"KeyFormatterType",-1),ne=t("code",null,"key",-1),oe=t("code",null,"KeyType",-1),ae=t("code",null,"token",-1),se=t("code",null,"AnalyzerToken",-1),ie=t("code",null,"string",-1),de=a('<p>A function to format the translation key based on the context.</p><h4 id="type-declaration-4" tabindex="-1"><a class="header-anchor" href="#type-declaration-4"><span>Type declaration</span></a></h4><p>▸ (<code>key</code>, <code>token</code>): <code>string</code></p><h5 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters"><span>Parameters</span></a></h5>',4),ce=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),pe=t("td",{style:{"text-align":"left"}},[t("code",null,"key")],-1),re={style:{"text-align":"left"}},ue=t("code",null,"KeyType",-1),he=t("td",{style:{"text-align":"left"}},[t("code",null,"token")],-1),ye={style:{"text-align":"left"}},_e=t("code",null,"AnalyzerToken",-1),fe=a(`<h5 id="returns" tabindex="-1"><a class="header-anchor" href="#returns"><span>Returns</span></a></h5><p><code>string</code></p><hr><h3 id="keytype" tabindex="-1"><a class="header-anchor" href="#keytype"><span>KeyType</span></a></h3><p>Ƭ <strong>KeyType</strong>: <code>string</code></p><p>Translation key as a string used to identify a translation.</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token string">&quot;my.translation.key&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="localetype" tabindex="-1"><a class="header-anchor" href="#localetype"><span>LocaleType</span></a></h3><p>Ƭ <strong>LocaleType</strong>: <code>string</code></p><p>Translation locale as a string representing a unique language.</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token string">&quot;en_US&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><hr><h3 id="loggeroptionstype" tabindex="-1"><a class="header-anchor" href="#loggeroptionstype"><span>LoggerOptionsType</span></a></h3><p>Ƭ <strong>LoggerOptionsType</strong>: <code>Object</code></p>`,17),ge=a('<h4 id="type-declaration-5" tabindex="-1"><a class="header-anchor" href="#type-declaration-5"><span>Type declaration</span></a></h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>namespace?</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">Specifies a namespace for identifying the purpose of the logger (e.g. <code>Analysis</code>). Defaults to <code>TRANSAX</code>.</td></tr><tr><td style="text-align:left;"><code>quiet?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">Disables all logging. Defaults to <code>false</code>.</td></tr><tr><td style="text-align:left;"><code>verbose?</code></td><td style="text-align:left;"><code>boolean</code></td><td style="text-align:left;">Enables verbose logging. Defaults to <code>false</code>.</td></tr></tbody></table><hr><h3 id="plugindictionarytype" tabindex="-1"><a class="header-anchor" href="#plugindictionarytype"><span>PluginDictionaryType</span></a></h3><p>Ƭ <strong>PluginDictionaryType</strong>: <code>Object</code></p>',5),xe=t("h4",{id:"type-declaration-6",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-6"},[t("span",null,"Type declaration")])],-1),me=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Te=t("td",{style:{"text-align":"left"}},[t("code",null,"handler")],-1),be={style:{"text-align":"left"}},Oe=t("code",null,"path",-1),ke=t("code",null,"string",-1),ve=t("code",null,"CatalogType",-1),Ce=t("code",null,"Promise",-1),Ae=t("code",null,"CatalogType",-1),Pe=t("code",null,"string",-1),De=t("td",{style:{"text-align":"left"}},[e("Specifies a handler for loading and parsing the translation dictionary files. This function is called each time the contents of a translation dictionary file changes and is responsible for loading and parsing the contents of the file. The result must be a catalog object or a promise that resolves to a catalog object. All returned catalogs are merged together. You can also use built-in handlers by specifying a string name (instead of a function), one of: "),t("code",null,"yaml"),e(" or "),t("code",null,"json"),e(". In this case the handler will infer the locale from the path (the name without the extension).")],-1),Le=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"pattern")]),t("td",{style:{"text-align":"left"}},[t("code",null,"string"),e("[] | "),t("code",null,"string")]),t("td",{style:{"text-align":"left"}},"Specifies a glob pattern or array of patterns to match your project's translation dictionary files.")],-1),Ie=t("hr",null,null,-1),ze=t("h3",{id:"plugininputtype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#plugininputtype"},[t("span",null,"PluginInputType")])],-1),Se=t("p",null,[e("Ƭ "),t("strong",null,"PluginInputType"),e(": "),t("code",null,"Object")],-1),Ne=t("h4",{id:"type-declaration-7",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-7"},[t("span",null,"Type declaration")])],-1),we=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),je=t("td",{style:{"text-align":"left"}},[t("code",null,"keyFormatter?")],-1),Ee={style:{"text-align":"left"}},Re=t("code",null,"KeyFormatterType",-1),Ge={style:{"text-align":"left"}},qe=t("code",null,"( key => key )",-1),Ve=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"keywords?")]),t("td",{style:{"text-align":"left"}},[t("code",null,"string"),e("[] | "),t("code",null,"string")]),t("td",{style:{"text-align":"left"}},[e("Specifies the function name / keywords or an array of keywords to match when looking for translation calls. Defaults to "),t("code",null,"[ '$t' ]"),e(".")])],-1),Fe=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"pattern")]),t("td",{style:{"text-align":"left"}},[t("code",null,"string"),e("[] | "),t("code",null,"string")]),t("td",{style:{"text-align":"left"}},"Specifies a glob pattern or array of patterns to match your project's source files to be observed & analyzed for translation calls.")],-1),Ke=t("hr",null,null,-1),He=t("h3",{id:"pluginoptionstype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#pluginoptionstype"},[t("span",null,"PluginOptionsType")])],-1),Xe=t("p",null,[e("Ƭ "),t("strong",null,"PluginOptionsType"),e(": "),t("code",null,"Object")],-1),Be=t("h4",{id:"type-declaration-8",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-8"},[t("span",null,"Type declaration")])],-1),Ye=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Me=t("td",{style:{"text-align":"left"}},[t("code",null,"dictionary")],-1),Ue={style:{"text-align":"left"}},$e=t("code",null,"PluginDictionaryType",-1),Ze=t("td",{style:{"text-align":"left"}},"Specifies dictionary options.",-1),Je=t("td",{style:{"text-align":"left"}},[t("code",null,"input")],-1),Qe={style:{"text-align":"left"}},We=t("code",null,"PluginInputType",-1),tl=t("td",{style:{"text-align":"left"}},"Specifies input options.",-1),el=t("td",{style:{"text-align":"left"}},[t("code",null,"output")],-1),ll={style:{"text-align":"left"}},nl=t("code",null,"PluginOutputType",-1),ol=t("td",{style:{"text-align":"left"}},"Specifies output options.",-1),al=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"quiet")]),t("td",{style:{"text-align":"left"}},[t("code",null,"boolean")]),t("td",{style:{"text-align":"left"}},"Specifies whether to suppress logging.")],-1),sl=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"verbose")]),t("td",{style:{"text-align":"left"}},[t("code",null,"boolean")]),t("td",{style:{"text-align":"left"}},"Specifies whether to log verbose information.")],-1),il=t("hr",null,null,-1),dl=t("h3",{id:"pluginoutputanalysistype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#pluginoutputanalysistype"},[t("span",null,"PluginOutputAnalysisType")])],-1),cl=t("p",null,[e("Ƭ "),t("strong",null,"PluginOutputAnalysisType"),e(": "),t("code",null,"Object")],-1),pl=t("h4",{id:"type-declaration-9",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-9"},[t("span",null,"Type declaration")])],-1),rl=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),ul=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"flavor")]),t("td",{style:{"text-align":"left"}},[t("code",null,"string")]),t("td",{style:{"text-align":"left"}},"Specifies the flavor of the output file being generated. Can be one of PluginOutputAnalysisFlavorMissing or PluginOutputAnalysisFlavorUnused for missing and unused translation keys respectively.")],-1),hl=t("td",{style:{"text-align":"left"}},[t("code",null,"handler?")],-1),yl={style:{"text-align":"left"}},_l=t("code",null,"path",-1),fl=t("code",null,"string",-1),gl=t("code",null,"generator",-1),xl=t("code",null,"Generator",-1),ml=t("code",null,"Promise",-1),Tl=t("code",null,"void",-1),bl=t("code",null,"void",-1),Ol=t("code",null,"string",-1),kl=t("td",{style:{"text-align":"left"}},[e("Specifies a handler function for encoding and writing the output file. It can be synchronous, or return a Promise. You can also use built-in handlers by specifying a string name (instead of a function), one of: "),t("code",null,"txt"),e(", "),t("code",null,"yaml"),e(" or "),t("code",null,"json"),e(". If left unspecified, the handler will be determined automatically based on the file extension if possible.")],-1),vl=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"path")]),t("td",{style:{"text-align":"left"}},[t("code",null,"string")]),t("td",{style:{"text-align":"left"}},"Specifies the path to the output file being generated.")],-1),Cl=t("hr",null,null,-1),Al=t("h3",{id:"pluginoutputcompilationtype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#pluginoutputcompilationtype"},[t("span",null,"PluginOutputCompilationType")])],-1),Pl=t("p",null,[e("Ƭ "),t("strong",null,"PluginOutputCompilationType"),e(": "),t("code",null,"Object")],-1),Dl=t("h4",{id:"type-declaration-10",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-10"},[t("span",null,"Type declaration")])],-1),Ll=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Il=t("td",{style:{"text-align":"left"}},[t("code",null,"handler?")],-1),zl={style:{"text-align":"left"}},Sl=t("code",null,"path",-1),Nl=t("code",null,"string",-1),wl=t("code",null,"generator",-1),jl=t("code",null,"Generator",-1),El=t("code",null,"Promise",-1),Rl=t("code",null,"void",-1),Gl=t("code",null,"void",-1),ql=t("code",null,"string",-1),Vl=t("td",{style:{"text-align":"left"}},[e("Specifies a handler function for encoding and writing the output file. It can be synchronous, or return a Promise. You can also use built-in handlers by specifying a string name (instead of a function), one of: "),t("code",null,"esm"),e(" or "),t("code",null,"cjs"),e(". If left unspecified, the handler will be determined automatically based on the file extension.")],-1),Fl=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"includeMeta?")]),t("td",{style:{"text-align":"left"}},[t("code",null,"boolean")]),t("td",{style:{"text-align":"left"}},[e("Specifies whether to include meta information in the output file. Defaults to "),t("code",null,"false"),e(".")])],-1),Kl=t("tr",null,[t("td",{style:{"text-align":"left"}},[t("code",null,"path")]),t("td",{style:{"text-align":"left"}},[t("code",null,"string")]),t("td",{style:{"text-align":"left"}},"Specifies the path to the output file being generated.")],-1),Hl=t("hr",null,null,-1),Xl=t("h3",{id:"pluginoutputtype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#pluginoutputtype"},[t("span",null,"PluginOutputType")])],-1),Bl=t("p",null,[e("Ƭ "),t("strong",null,"PluginOutputType"),e(": "),t("code",null,"Object")],-1),Yl=t("h4",{id:"type-declaration-11",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-11"},[t("span",null,"Type declaration")])],-1),Ml=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),Ul=t("td",{style:{"text-align":"left"}},[t("code",null,"compiled")],-1),$l={style:{"text-align":"left"}},Zl=t("code",null,"PluginOutputCompilationType",-1),Jl=t("code",null,"string",-1),Ql=t("td",{style:{"text-align":"left"}},[e("Specifies the output file for compiled translations. If a "),t("code",null,"string"),e(" is provided, it will be used as the "),t("code",null,"path"),e(" option.")],-1),Wl=t("td",{style:{"text-align":"left"}},[t("code",null,"missing?")],-1),tn={style:{"text-align":"left"}},en=t("code",null,"PluginOutputAnalysisType",-1),ln=t("code",null,"string",-1),nn=t("td",{style:{"text-align":"left"}},[e("Specifies the output file for missing translations. If a "),t("code",null,"string"),e(" is provided, it will be used as the "),t("code",null,"path"),e(" option.")],-1),on=t("td",{style:{"text-align":"left"}},[t("code",null,"unused?")],-1),an={style:{"text-align":"left"}},sn=t("code",null,"PluginOutputAnalysisType",-1),dn=t("code",null,"string",-1),cn=t("td",{style:{"text-align":"left"}},[e("Specifies the output file for unused translations. If a "),t("code",null,"string"),e(" is provided, it will be used as the "),t("code",null,"path"),e(" option.")],-1),pn=t("hr",null,null,-1),rn=t("h3",{id:"translatoroptionstype",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#translatoroptionstype"},[t("span",null,"TranslatorOptionsType")])],-1),un=t("p",null,[e("Ƭ "),t("strong",null,"TranslatorOptionsType"),e(": "),t("code",null,"Object")],-1),hn=t("h4",{id:"type-declaration-12",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#type-declaration-12"},[t("span",null,"Type declaration")])],-1),yn=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type"),t("th",{style:{"text-align":"left"}},"Description")])],-1),_n=t("td",{style:{"text-align":"left"}},[t("code",null,"fallbackLocale?")],-1),fn={style:{"text-align":"left"}},gn=t("code",null,"LocaleType",-1),xn=t("td",{style:{"text-align":"left"}},[e("Optional fallback locale. Defaults to "),t("code",null,"undefined"),e(".")],-1),mn=t("td",{style:{"text-align":"left"}},[t("code",null,"logger?")],-1),Tn={style:{"text-align":"left"}},bn=t("code",null,"LoggerInterface",-1),On=t("td",{style:{"text-align":"left"}},[e("Optional logger instance. Defaults to "),t("code",null,"new Logger( { namespace: 'TRANSAX:TRANSLATOR' } )"),e(".")],-1),kn=t("td",{style:{"text-align":"left"}},[t("code",null,"translations?")],-1),vn={style:{"text-align":"left"}},Cn=t("code",null,"CompiledCatalogType",-1),An=t("td",{style:{"text-align":"left"}},[e("Optional compiled translation catalog. Defaults to "),t("code",null,"{}"),e(".")],-1),Pn=a(`<hr><h3 id="valuetype" tabindex="-1"><a class="header-anchor" href="#valuetype"><span>ValueType</span></a></h3><p>Ƭ <strong>ValueType</strong>: <code>string</code></p><p>Translation value as a string translation of its corresponding key.</p><p><strong><code>Example</code></strong></p><div class="language-typescript line-numbers-mode" data-ext="ts" data-title="ts"><pre class="language-typescript"><code><span class="token string">&quot;Hello there, nice to meet you!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="functions-1" tabindex="-1"><a class="header-anchor" href="#functions-1"><span>Functions</span></a></h2><h3 id="viteplugin" tabindex="-1"><a class="header-anchor" href="#viteplugin"><span>VitePlugin</span></a></h3><p>▸ <strong>VitePlugin</strong>(<code>options</code>): <code>Object</code></p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4>`,10),Dn=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"Name"),t("th",{style:{"text-align":"left"}},"Type")])],-1),Ln=t("td",{style:{"text-align":"left"}},[t("code",null,"options")],-1),In={style:{"text-align":"left"}},zn=t("code",null,"PluginOptionsType",-1),Sn=a('<h4 id="returns-1" tabindex="-1"><a class="header-anchor" href="#returns-1"><span>Returns</span></a></h4><p><code>Object</code></p><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>name</code></td><td style="text-align:left;"><code>string</code></td></tr><tr><td style="text-align:left;"><code>buildStart</code></td><td style="text-align:left;">() =&gt; <code>void</code></td></tr><tr><td style="text-align:left;"><code>closeBundle</code></td><td style="text-align:left;">() =&gt; <code>Promise</code>&lt;[<code>void</code>, <code>void</code>]&gt;</td></tr></tbody></table>',3);function Nn(wn,jn){const l=i("RouterLink");return d(),c("div",null,[r,t("ul",null,[t("li",null,[n(l,{to:"/api/classes/Analyzer.html"},{default:o(()=>[e("Analyzer")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/AnalyzerOptions.html"},{default:o(()=>[e("AnalyzerOptions")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/AnalyzerToken.html"},{default:o(()=>[e("AnalyzerToken")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/CallExpressionArrayAccess.html"},{default:o(()=>[e("CallExpressionArrayAccess")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/CallExpressionInvocation.html"},{default:o(()=>[e("CallExpressionInvocation")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/CallExpressionObjectAccess.html"},{default:o(()=>[e("CallExpressionObjectAccess")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/CallExpressionToken.html"},{default:o(()=>[e("CallExpressionToken")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/ComparisonExpressionToken.html"},{default:o(()=>[e("ComparisonExpressionToken")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/Compiler.html"},{default:o(()=>[e("Compiler")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/CompilerContext.html"},{default:o(()=>[e("CompilerContext")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/CompilerOptions.html"},{default:o(()=>[e("CompilerOptions")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/CompilerToken.html"},{default:o(()=>[e("CompilerToken")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/Generator.html"},{default:o(()=>[e("Generator")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/GeneratorOptions.html"},{default:o(()=>[e("GeneratorOptions")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/LiteralToken.html"},{default:o(()=>[e("LiteralToken")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/Logger.html"},{default:o(()=>[e("Logger")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/LoggerOptions.html"},{default:o(()=>[e("LoggerOptions")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/TernaryExpressionToken.html"},{default:o(()=>[e("TernaryExpressionToken")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/TextToken.html"},{default:o(()=>[e("TextToken")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/Translator.html"},{default:o(()=>[e("Translator")]),_:1})]),t("li",null,[n(l,{to:"/api/classes/TranslatorOptions.html"},{default:o(()=>[e("TranslatorOptions")]),_:1})])]),u,t("ul",null,[t("li",null,[n(l,{to:"/api/interfaces/AnalyzerInterface.html"},{default:o(()=>[e("AnalyzerInterface")]),_:1})]),t("li",null,[n(l,{to:"/api/interfaces/CompilerInterface.html"},{default:o(()=>[e("CompilerInterface")]),_:1})]),t("li",null,[n(l,{to:"/api/interfaces/GeneratorInterface.html"},{default:o(()=>[e("GeneratorInterface")]),_:1})]),t("li",null,[n(l,{to:"/api/interfaces/LoggerInterface.html"},{default:o(()=>[e("LoggerInterface")]),_:1})]),t("li",null,[n(l,{to:"/api/interfaces/TranslatorInterface.html"},{default:o(()=>[e("TranslatorInterface")]),_:1})])]),h,t("ul",null,[t("li",null,[n(l,{to:"/api/#analyzeroptionstype"},{default:o(()=>[e("AnalyzerOptionsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#catalogtype"},{default:o(()=>[e("CatalogType")]),_:1})]),t("li",null,[n(l,{to:"/api/#compiledcatalogtype"},{default:o(()=>[e("CompiledCatalogType")]),_:1})]),t("li",null,[n(l,{to:"/api/#compileddictionarytype"},{default:o(()=>[e("CompiledDictionaryType")]),_:1})]),t("li",null,[n(l,{to:"/api/#compiledvaluetype"},{default:o(()=>[e("CompiledValueType")]),_:1})]),t("li",null,[n(l,{to:"/api/#compileroptionstype"},{default:o(()=>[e("CompilerOptionsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#contextglobalstype"},{default:o(()=>[e("ContextGlobalsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#contextparamstype"},{default:o(()=>[e("ContextParamsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#contexttype"},{default:o(()=>[e("ContextType")]),_:1})]),t("li",null,[n(l,{to:"/api/#dictionarytype"},{default:o(()=>[e("DictionaryType")]),_:1})]),t("li",null,[n(l,{to:"/api/#generatoroptionstype"},{default:o(()=>[e("GeneratorOptionsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#keyformattertype"},{default:o(()=>[e("KeyFormatterType")]),_:1})]),t("li",null,[n(l,{to:"/api/#keytype"},{default:o(()=>[e("KeyType")]),_:1})]),t("li",null,[n(l,{to:"/api/#localetype"},{default:o(()=>[e("LocaleType")]),_:1})]),t("li",null,[n(l,{to:"/api/#loggeroptionstype"},{default:o(()=>[e("LoggerOptionsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#plugindictionarytype"},{default:o(()=>[e("PluginDictionaryType")]),_:1})]),t("li",null,[n(l,{to:"/api/#plugininputtype"},{default:o(()=>[e("PluginInputType")]),_:1})]),t("li",null,[n(l,{to:"/api/#pluginoptionstype"},{default:o(()=>[e("PluginOptionsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#pluginoutputanalysistype"},{default:o(()=>[e("PluginOutputAnalysisType")]),_:1})]),t("li",null,[n(l,{to:"/api/#pluginoutputcompilationtype"},{default:o(()=>[e("PluginOutputCompilationType")]),_:1})]),t("li",null,[n(l,{to:"/api/#pluginoutputtype"},{default:o(()=>[e("PluginOutputType")]),_:1})]),t("li",null,[n(l,{to:"/api/#translatoroptionstype"},{default:o(()=>[e("TranslatorOptionsType")]),_:1})]),t("li",null,[n(l,{to:"/api/#valuetype"},{default:o(()=>[e("ValueType")]),_:1})])]),y,t("ul",null,[t("li",null,[n(l,{to:"/api/#viteplugin"},{default:o(()=>[e("VitePlugin")]),_:1})])]),_,f,g,t("p",null,[e("Options for the "),n(l,{to:"/api/classes/Analyzer.html"},{default:o(()=>[e("Analyzer")]),_:1}),e(".")]),x,t("table",null,[m,t("tbody",null,[t("tr",null,[T,t("td",b,[n(l,{to:"/api/#keyformattertype"},{default:o(()=>[O]),_:1})]),k]),t("tr",null,[v,t("td",C,[n(l,{to:"/api/interfaces/LoggerInterface.html"},{default:o(()=>[A]),_:1}),e(" | "),n(l,{to:"/api/#loggeroptionstype"},{default:o(()=>[P]),_:1})]),D]),L])]),I,z,t("p",null,[e("Ƭ "),S,e(": "),N,e("<"),n(l,{to:"/api/#localetype"},{default:o(()=>[w]),_:1}),e(", "),n(l,{to:"/api/#dictionarytype"},{default:o(()=>[j]),_:1}),e(">")]),E,t("p",null,[e("Ƭ "),R,e(": "),G,e("<"),n(l,{to:"/api/#localetype"},{default:o(()=>[q]),_:1}),e(", "),n(l,{to:"/api/#compileddictionarytype"},{default:o(()=>[V]),_:1}),e(">")]),t("p",null,[e("A compiled version of a "),n(l,{to:"/api/#catalogtype"},{default:o(()=>[e("CatalogType")]),_:1}),e(".")]),F,K,t("p",null,[e("Ƭ "),H,e(": "),X,e("<"),n(l,{to:"/api/#keytype"},{default:o(()=>[B]),_:1}),e(", "),n(l,{to:"/api/#compiledvaluetype"},{default:o(()=>[Y]),_:1}),e(">")]),t("p",null,[e("A compiled version of a "),n(l,{to:"/api/#dictionarytype"},{default:o(()=>[e("DictionaryType")]),_:1}),e(".")]),M,U,t("p",null,[e("Ƭ "),$,e(": ("),Z,e(": "),n(l,{to:"/api/#contextparamstype"},{default:o(()=>[J]),_:1}),e(", "),Q,e(": "),n(l,{to:"/api/#contextglobalstype"},{default:o(()=>[W]),_:1}),e(") => "),tt,e(" | "),et]),t("p",null,[e("A compiled version of a "),n(l,{to:"/api/#valuetype"},{default:o(()=>[e("ValueType")]),_:1}),e(".")]),lt,nt,ot,t("p",null,[e("Options for the "),n(l,{to:"/api/classes/Compiler.html"},{default:o(()=>[e("Compiler")]),_:1}),e(".")]),at,t("table",null,[st,t("tbody",null,[t("tr",null,[it,t("td",dt,[n(l,{to:"/api/interfaces/LoggerInterface.html"},{default:o(()=>[ct]),_:1}),e(" | "),n(l,{to:"/api/#loggeroptionstype"},{default:o(()=>[pt]),_:1})]),rt])])]),ut,t("table",null,[ht,t("tbody",null,[t("tr",null,[yt,t("td",_t,[n(l,{to:"/api/#contextglobalstype"},{default:o(()=>[ft]),_:1})]),gt]),t("tr",null,[xt,t("td",mt,[n(l,{to:"/api/#localetype"},{default:o(()=>[Tt]),_:1})]),bt]),t("tr",null,[Ot,t("td",kt,[n(l,{to:"/api/#contextparamstype"},{default:o(()=>[vt]),_:1})]),Ct])])]),At,Pt,t("p",null,[e("Ƭ "),Dt,e(": "),Lt,e("<"),n(l,{to:"/api/#keytype"},{default:o(()=>[It]),_:1}),e(", "),n(l,{to:"/api/#valuetype"},{default:o(()=>[zt]),_:1}),e(">")]),St,t("p",null,[e("Options for the "),n(l,{to:"/api/classes/Generator.html"},{default:o(()=>[e("Generator")]),_:1}),e(".")]),Nt,t("table",null,[wt,t("tbody",null,[t("tr",null,[jt,t("td",Et,[n(l,{to:"/api/interfaces/AnalyzerInterface.html"},{default:o(()=>[Rt]),_:1}),e(" | "),n(l,{to:"/api/#analyzeroptionstype"},{default:o(()=>[Gt]),_:1})]),qt]),t("tr",null,[Vt,t("td",Ft,[n(l,{to:"/api/interfaces/CompilerInterface.html"},{default:o(()=>[Kt]),_:1}),e(" | "),n(l,{to:"/api/#compileroptionstype"},{default:o(()=>[Ht]),_:1})]),Xt]),t("tr",null,[Bt,t("td",Yt,[n(l,{to:"/api/interfaces/LoggerInterface.html"},{default:o(()=>[Mt]),_:1}),e(" | "),n(l,{to:"/api/#loggeroptionstype"},{default:o(()=>[Ut]),_:1})]),$t]),t("tr",null,[Zt,t("td",Jt,[n(l,{to:"/api/#catalogtype"},{default:o(()=>[Qt]),_:1})]),Wt])])]),te,ee,t("p",null,[e("Ƭ "),le,e(": ("),ne,e(": "),n(l,{to:"/api/#keytype"},{default:o(()=>[oe]),_:1}),e(", "),ae,e(": "),n(l,{to:"/api/classes/AnalyzerToken.html"},{default:o(()=>[se]),_:1}),e(") => "),ie]),de,t("table",null,[ce,t("tbody",null,[t("tr",null,[pe,t("td",re,[n(l,{to:"/api/#keytype"},{default:o(()=>[ue]),_:1})])]),t("tr",null,[he,t("td",ye,[n(l,{to:"/api/classes/AnalyzerToken.html"},{default:o(()=>[_e]),_:1})])])])]),fe,t("p",null,[e("Options for "),n(l,{to:"/api/classes/Logger.html"},{default:o(()=>[e("Logger")]),_:1}),e(".")]),ge,t("p",null,[e("Options for the "),n(l,{to:"/api/#dictionary"},{default:o(()=>[e("PluginOptionsType.dictionary")]),_:1}),e(".")]),xe,t("table",null,[me,t("tbody",null,[t("tr",null,[Te,t("td",be,[e("("),Oe,e(": "),ke,e(") => "),n(l,{to:"/api/#catalogtype"},{default:o(()=>[ve]),_:1}),e(" | "),Ce,e("<"),n(l,{to:"/api/#catalogtype"},{default:o(()=>[Ae]),_:1}),e("> | "),Pe]),De]),Le])]),Ie,ze,Se,t("p",null,[e("Options for the "),n(l,{to:"/api/#input"},{default:o(()=>[e("PluginOptionsType.input")]),_:1}),e(".")]),Ne,t("table",null,[we,t("tbody",null,[t("tr",null,[je,t("td",Ee,[n(l,{to:"/api/#keyformattertype"},{default:o(()=>[Re]),_:1})]),t("td",Ge,[e("Specifies a function to be used to transform the translation keys depending on the source they were detected at. Defaults to "),qe,e(". "),n(l,{to:"/api/#keyformatter"},{default:o(()=>[e("AnalyzerOptionsType.keyFormatter")]),_:1})])]),Ve,Fe])]),Ke,He,Xe,t("p",null,[e("Options for the "),n(l,{to:"/api/#viteplugin"},{default:o(()=>[e("VitePlugin")]),_:1}),e(".")]),Be,t("table",null,[Ye,t("tbody",null,[t("tr",null,[Me,t("td",Ue,[n(l,{to:"/api/#plugindictionarytype"},{default:o(()=>[$e]),_:1})]),Ze]),t("tr",null,[Je,t("td",Qe,[n(l,{to:"/api/#plugininputtype"},{default:o(()=>[We]),_:1})]),tl]),t("tr",null,[el,t("td",ll,[n(l,{to:"/api/#pluginoutputtype"},{default:o(()=>[nl]),_:1})]),ol]),al,sl])]),il,dl,cl,t("p",null,[e("Options for "),n(l,{to:"/api/#missing"},{default:o(()=>[e("PluginOutputType.missing")]),_:1}),e(" and "),n(l,{to:"/api/#unused"},{default:o(()=>[e("PluginOutputType.unused")]),_:1}),e(".")]),pl,t("table",null,[rl,t("tbody",null,[ul,t("tr",null,[hl,t("td",yl,[e("("),_l,e(": "),fl,e(", "),gl,e(": "),n(l,{to:"/api/classes/Generator.html"},{default:o(()=>[xl]),_:1}),e(") => "),ml,e("<"),Tl,e("> | "),bl,e(" | "),Ol]),kl]),vl])]),Cl,Al,Pl,t("p",null,[e("Options for the "),n(l,{to:"/api/#input"},{default:o(()=>[e("PluginOptionsType.input")]),_:1}),e(".")]),Dl,t("table",null,[Ll,t("tbody",null,[t("tr",null,[Il,t("td",zl,[e("("),Sl,e(": "),Nl,e(", "),wl,e(": "),n(l,{to:"/api/classes/Generator.html"},{default:o(()=>[jl]),_:1}),e(") => "),El,e("<"),Rl,e("> | "),Gl,e(" | "),ql]),Vl]),Fl,Kl])]),Hl,Xl,Bl,t("p",null,[e("Options for "),n(l,{to:"/api/#output"},{default:o(()=>[e("PluginOptionsType.output")]),_:1}),e(".")]),Yl,t("table",null,[Ml,t("tbody",null,[t("tr",null,[Ul,t("td",$l,[n(l,{to:"/api/#pluginoutputcompilationtype"},{default:o(()=>[Zl]),_:1}),e(" | "),Jl]),Ql]),t("tr",null,[Wl,t("td",tn,[n(l,{to:"/api/#pluginoutputanalysistype"},{default:o(()=>[en]),_:1}),e(" | "),ln]),nn]),t("tr",null,[on,t("td",an,[n(l,{to:"/api/#pluginoutputanalysistype"},{default:o(()=>[sn]),_:1}),e(" | "),dn]),cn])])]),pn,rn,un,t("p",null,[e("Options for the "),n(l,{to:"/api/classes/Translator.html"},{default:o(()=>[e("Translator")]),_:1}),e(".")]),hn,t("table",null,[yn,t("tbody",null,[t("tr",null,[_n,t("td",fn,[n(l,{to:"/api/#localetype"},{default:o(()=>[gn]),_:1})]),xn]),t("tr",null,[mn,t("td",Tn,[n(l,{to:"/api/interfaces/LoggerInterface.html"},{default:o(()=>[bn]),_:1})]),On]),t("tr",null,[kn,t("td",vn,[n(l,{to:"/api/#compiledcatalogtype"},{default:o(()=>[Cn]),_:1})]),An])])]),Pn,t("table",null,[Dn,t("tbody",null,[t("tr",null,[Ln,t("td",In,[n(l,{to:"/api/#pluginoptionstype"},{default:o(()=>[zn]),_:1})])])])]),Sn])}const Gn=s(p,[["render",Nn],["__file","index.html.vue"]]);export{Gn as default};
