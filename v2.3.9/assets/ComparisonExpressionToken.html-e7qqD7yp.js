import{_ as a}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as i,o as r,c,a as e,d as s,w as n,b as t,e as l}from"./app-t0fXQE-E.js";const d={},h=l('<h1 id="class-comparisonexpressiontoken" tabindex="-1"><a class="header-anchor" href="#class-comparisonexpressiontoken"><span>Class: ComparisonExpressionToken</span></a></h1><p>Represents a comparison expression.</p><p>It must consist of two expressions separated by a comparison operator.</p><p>Examples: <code>a == b</code><code>a != b</code><code>a &gt; b</code><code>a &lt; b</code><code>a &gt;= b</code><code>a &lt;= b</code><code>a === b</code><code>a !== b</code></p><h2 id="hierarchy" tabindex="-1"><a class="header-anchor" href="#hierarchy"><span>Hierarchy</span></a></h2>',5),p=e("code",null,"CompilerToken",-1),u=e("p",null,[t("↳ "),e("strong",null,[e("code",null,"ComparisonExpressionToken")])],-1),_=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents"},[e("span",null,"Table of contents")])],-1),m=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors"},[e("span",null,"Constructors")])],-1),f=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties"},[e("span",null,"Properties")])],-1),x=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods"},[e("span",null,"Methods")])],-1),g=e("h2",{id:"constructors-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors-1"},[e("span",null,"Constructors")])],-1),C=e("h3",{id:"constructor",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructor"},[e("span",null,"constructor")])],-1),T=e("strong",null,"new ComparisonExpressionToken",-1),b=e("code",null,"left",-1),k=e("code",null,"right",-1),y=e("code",null,"operator",-1),E=e("code",null,"text",-1),w=e("code",null,"location",-1),v=e("code",null,"ComparisonExpressionToken",-1),R=e("p",null,"Creates a new instance.",-1),N=e("h4",{id:"parameters",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#parameters"},[e("span",null,"Parameters")])],-1),I=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),P=e("td",{style:{"text-align":"left"}},[e("code",null,"left")],-1),O={style:{"text-align":"left"}},V=e("code",null,"CompilerToken",-1),W=e("td",{style:{"text-align":"left"}},"The left-hand side of the expression.",-1),B=e("td",{style:{"text-align":"left"}},[e("code",null,"right")],-1),D={style:{"text-align":"left"}},L=e("code",null,"CompilerToken",-1),M=e("td",{style:{"text-align":"left"}},"The right-hand side of the expression.",-1),S=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"operator")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The comparison operator.")],-1),A=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"text")]),e("td",{style:{"text-align":"left"}},[e("code",null,"string")]),e("td",{style:{"text-align":"left"}},"The full text (content) of the expression.")],-1),F=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"location")]),e("td",{style:{"text-align":"left"}},[e("code",null,"LocationRange")]),e("td",{style:{"text-align":"left"}},"The location of the invocation within the source code.")],-1),H=e("h4",{id:"returns",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns"},[e("span",null,"Returns")])],-1),j=e("code",null,"ComparisonExpressionToken",-1),q=e("h4",{id:"overrides",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides"},[e("span",null,"Overrides")])],-1),z=l('<h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1"><span>Properties</span></a></h2><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column"><span>column</span></a></h3><p>• <strong>column</strong>: <code>number</code></p><p>The column number of the expression within the translation message.</p><h4 id="inherited-from" tabindex="-1"><a class="header-anchor" href="#inherited-from"><span>Inherited from</span></a></h4>',5),G=e("hr",null,null,-1),J=e("h3",{id:"left",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#left"},[e("span",null,"left")])],-1),K=e("code",null,"Readonly",-1),Q=e("strong",null,"left",-1),U=e("code",null,"CompilerToken",-1),X=e("hr",null,null,-1),Y=e("h3",{id:"line",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#line"},[e("span",null,"line")])],-1),Z=e("p",null,[t("• "),e("strong",null,"line"),t(": "),e("code",null,"number")],-1),$=e("p",null,"The line number of the expression within the translation message.",-1),ee=e("h4",{id:"inherited-from-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-1"},[e("span",null,"Inherited from")])],-1),te=l('<hr><h3 id="operator" tabindex="-1"><a class="header-anchor" href="#operator"><span>operator</span></a></h3><p>• <code>Readonly</code> <strong>operator</strong>: <code>string</code></p><hr><h3 id="right" tabindex="-1"><a class="header-anchor" href="#right"><span>right</span></a></h3>',5),oe=e("code",null,"Readonly",-1),se=e("strong",null,"right",-1),ne=e("code",null,"CompilerToken",-1),le=e("hr",null,null,-1),ae=e("h3",{id:"text",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#text"},[e("span",null,"text")])],-1),ie=e("p",null,[t("• "),e("strong",null,"text"),t(": "),e("code",null,"string")],-1),re=e("p",null,"The full text (content) of the expression.",-1),ce=e("h4",{id:"inherited-from-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-2"},[e("span",null,"Inherited from")])],-1),de=l('<h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1"><span>Methods</span></a></h2><h3 id="compile" tabindex="-1"><a class="header-anchor" href="#compile"><span>compile</span></a></h3><p>▸ <strong>compile</strong>(<code>context</code>): <code>string</code></p><p>Compiles the expression into an executable ECMAScript6 string.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1"><span>Parameters</span></a></h4>',5),he=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),pe=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),ue={style:{"text-align":"left"}},_e=e("code",null,"CompilerContext",-1),me=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),fe=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1"},[e("span",null,"Returns")])],-1),xe=e("p",null,[e("code",null,"string")],-1),ge=e("h4",{id:"overrides-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#overrides-1"},[e("span",null,"Overrides")])],-1),Ce=l('<hr><h3 id="compilewrap" tabindex="-1"><a class="header-anchor" href="#compilewrap"><span>compileWrap</span></a></h3><p>▸ <strong>compileWrap</strong>(<code>context</code>, <code>instanceOfs</code>): <code>string</code></p><p>Same as <code>compile()</code> except that it wraps the compiled expression in parentheses if the current token is an instance of the specified types.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2"><span>Parameters</span></a></h4>',5),Te=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),be=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),ke={style:{"text-align":"left"}},ye=e("code",null,"CompilerContext",-1),Ee=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),we=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"instanceOfs")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Function"),t("[]")]),e("td",{style:{"text-align":"left"}},"The types to check for.")],-1),ve=e("h4",{id:"returns-2",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-2"},[e("span",null,"Returns")])],-1),Re=e("p",null,[e("code",null,"string")],-1),Ne=e("h4",{id:"inherited-from-3",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#inherited-from-3"},[e("span",null,"Inherited from")])],-1);function Ie(Pe,Oe){const o=i("RouterLink");return r(),c("div",null,[h,e("ul",null,[e("li",null,[e("p",null,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[p]),_:1})]),u])]),_,m,e("ul",null,[e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#constructor"},{default:n(()=>[t("constructor")]),_:1})])]),f,e("ul",null,[e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#column"},{default:n(()=>[t("column")]),_:1})]),e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#left"},{default:n(()=>[t("left")]),_:1})]),e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#line"},{default:n(()=>[t("line")]),_:1})]),e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#operator"},{default:n(()=>[t("operator")]),_:1})]),e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#right"},{default:n(()=>[t("right")]),_:1})]),e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#text"},{default:n(()=>[t("text")]),_:1})])]),x,e("ul",null,[e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#compile"},{default:n(()=>[t("compile")]),_:1})]),e("li",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html#compilewrap"},{default:n(()=>[t("compileWrap")]),_:1})])]),g,C,e("p",null,[t("• "),T,t("("),b,t(", "),k,t(", "),y,t(", "),E,t(", "),w,t("): "),s(o,{to:"/api/classes/ComparisonExpressionToken.html"},{default:n(()=>[v]),_:1})]),R,N,e("table",null,[I,e("tbody",null,[e("tr",null,[P,e("td",O,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[V]),_:1})]),W]),e("tr",null,[B,e("td",D,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[L]),_:1})]),M]),S,A,F])]),H,e("p",null,[s(o,{to:"/api/classes/ComparisonExpressionToken.html"},{default:n(()=>[j]),_:1})]),q,e("p",null,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),s(o,{to:"/api/classes/CompilerToken.html#constructor"},{default:n(()=>[t("constructor")]),_:1})]),z,e("p",null,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),s(o,{to:"/api/classes/CompilerToken.html#column"},{default:n(()=>[t("column")]),_:1})]),G,J,e("p",null,[t("• "),K,t(),Q,t(": "),s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[U]),_:1})]),X,Y,Z,$,ee,e("p",null,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),s(o,{to:"/api/classes/CompilerToken.html#line"},{default:n(()=>[t("line")]),_:1})]),te,e("p",null,[t("• "),oe,t(),se,t(": "),s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[ne]),_:1})]),le,ae,ie,re,ce,e("p",null,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),s(o,{to:"/api/classes/CompilerToken.html#text"},{default:n(()=>[t("text")]),_:1})]),de,e("table",null,[he,e("tbody",null,[e("tr",null,[pe,e("td",ue,[s(o,{to:"/api/classes/CompilerContext.html"},{default:n(()=>[_e]),_:1})]),me])])]),fe,xe,ge,e("p",null,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),s(o,{to:"/api/classes/CompilerToken.html#compile"},{default:n(()=>[t("compile")]),_:1})]),Ce,e("table",null,[Te,e("tbody",null,[e("tr",null,[be,e("td",ke,[s(o,{to:"/api/classes/CompilerContext.html"},{default:n(()=>[ye]),_:1})]),Ee]),we])]),ve,Re,Ne,e("p",null,[s(o,{to:"/api/classes/CompilerToken.html"},{default:n(()=>[t("CompilerToken")]),_:1}),t("."),s(o,{to:"/api/classes/CompilerToken.html#compilewrap"},{default:n(()=>[t("compileWrap")]),_:1})])])}const Be=a(d,[["render",Ie],["__file","ComparisonExpressionToken.html.vue"]]);export{Be as default};
