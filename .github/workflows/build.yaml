name: build

on:
  push:
    branches: [ master ]

jobs:
  purge:
    name: Purge
    runs-on: ubuntu-latest
    permissions: { actions: write }

    steps:
      - name: Setup JQ
        uses: dcarbone/install-jq-action@v2
      - name: Purge
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/tonybogdanov/transax/actions/runs --paginate | \
          jq '.workflow_runs[] | .id' | \
          xargs -t -I{} sh -c "gh api -X DELETE /repos/tonybogdanov/transax/actions/runs/{} || true"

  test:
    name: Test
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'release:')"

    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        run: npm i
      - name: Test
        run: npm run test

  test_coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'release:')

    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        run: npm i
      - name: Test
        run: npm run test:coverage
      - name: Export Coverage
        uses: actions/upload-artifact@v4
        with: { name: coverage, path: coverage }

  docs:
    name: Docs
    runs-on: ubuntu-latest
    needs: test_coverage

    steps:
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Setup JQ
        uses: dcarbone/install-jq-action@v2
      - name: Setup Rsync
        uses: GuillaumeFalourd/setup-rsync@v1.2
      - name: Checkout
        uses: actions/checkout@v4
      - id: version
        name: Version
        run: echo "version=$(jq -r .version package.json)" >> $GITHUB_OUTPUT
      - name: Import Coverage
        uses: actions/download-artifact@v4
        with: { name: coverage, path: coverage }
      - name: Setup
        run: npm i
      - name: Pre-Patch
        run: sed -i "s/__VERSION__/v${{ steps.version.outputs.version }}/g" docs/introduction.md
      - name: Build
        run: npm run build:docs
      - name: Prepare
        run: mkdir -p push/v${{ steps.version.outputs.version }}
      - name: Move
        run: rsync -a docs/.vuepress/dist/ push/v${{ steps.version.outputs.version }}/
      - name: Post-Patch
        run: |
          cp coverage/badge.svg push/coverage.svg
          echo "PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCiAgPGhlYWQ+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0icmVmcmVzaCIgY29udGVudD0iMDsgdXJsPSc=" | base64 -d > push/index.html
          echo "PCFET0NUWVBFIGh0bWw+DQo8aHRtbD4NCiAgPGhlYWQ+DQogICAgPG1ldGEgaHR0cC1lcXVpdj0icmVmcmVzaCIgY29udGVudD0iMDsgdXJsPSc=" | base64 -d > push/coverage.html
          echo -n "/transax/v${{ steps.version.outputs.version }}" >> push/index.html
          echo -n "/transax/v${{ steps.version.outputs.version }}/coverage" >> push/coverage.html
          echo "JyIgLz4NCiAgPC9oZWFkPg0KICA8Ym9keT4NCiAgPC9ib2R5Pg0KPC9odG1sPg==" | base64 -d >> push/index.html
          echo "JyIgLz4NCiAgPC9oZWFkPg0KICA8Ym9keT4NCiAgPC9ib2R5Pg0KPC9odG1sPg==" | base64 -d >> push/coverage.html
      - name: Push
        uses: peaceiris/actions-gh-pages@v3
        with:
          keep_files: true
          publish_dir: push
          github_token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: test_coverage

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with: { node-version: 20, registry-url: 'https://registry.npmjs.org' }
      - name: Release
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
