import{_ as s}from"./plugin-vue_export-helper-x3n3nnut.js";import{r as t,o,c as i,a as n,b as e,d as p,e as c}from"./app-BkeDxdD5.js";const r={},d=n("h1",{id:"vite",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vite"},[n("span",null,"Vite")])],-1),l=n("code",null,"transax",-1),u={href:"https://vitejs.dev",target:"_blank",rel:"noopener noreferrer"},h=c(`<h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage"><span>Usage</span></a></h2><p>To use the plugin, simply add it to your <code>vite.config.js</code> file:</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineConfig <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vite&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> VitePlugin <span class="token keyword">as</span> transax <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;transax/plugin&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token function">transax</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>
            <span class="token comment">// ...options</span>
        <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h2><p>As a bare minimum you need to configure how your translation files are loaded, how your app files are scanned for translation key usage and where to output the compiled translations.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token function">transax</span><span class="token punctuation">(</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">dictionary</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token string">&#39;translations/*.yaml&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">handler</span><span class="token operator">:</span> <span class="token string">&#39;yaml&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">input</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">pattern</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&#39;src/**/*.{js,jsx,cjs,mjs,ts,vue}&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">compiled</span><span class="token operator">:</span> <span class="token string">&#39;translations/compiled.js&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dictionary" tabindex="-1"><a class="header-anchor" href="#dictionary"><span><code>dictionary</code></span></a></h3><p>Specifies dictionary options.</p><h3 id="dictionary-pattern" tabindex="-1"><a class="header-anchor" href="#dictionary-pattern"><span><code>dictionary.pattern</code></span></a></h3><p>Specifies a glob pattern or array of patterns to match your project&#39;s translation dictionary files.</p><h3 id="dictionary-handler" tabindex="-1"><a class="header-anchor" href="#dictionary-handler"><span><code>dictionary.handler</code></span></a></h3><p>Specifies a handler for loading and parsing the translation dictionary files. This function is called each time the contents of a translation dictionary file changes and is responsible for loading and parsing the contents of the file.</p><p>The result must be a catalog object or a promise that resolves to a catalog object. All returned catalogs are merged together.</p><p>You can also use built-in handlers by specifying a string name (instead of a function), one of: <code>yaml</code> or <code>json</code>. In this case the handler will infer the locale from the path (the name without the extension).</p><h3 id="input" tabindex="-1"><a class="header-anchor" href="#input"><span><code>input</code></span></a></h3><p>Specifies input options.</p><h3 id="input-pattern" tabindex="-1"><a class="header-anchor" href="#input-pattern"><span><code>input.pattern</code></span></a></h3><p>Specifies a glob pattern or array of patterns to match your project&#39;s source files to be observed &amp; analyzed for translation calls.</p><h3 id="input-keywords" tabindex="-1"><a class="header-anchor" href="#input-keywords"><span><code>input.keywords</code></span></a></h3><p>Specifies the function name / keywords or an array of keywords to match when looking for translation calls. Defaults to <code>[ &#39;$t&#39; ]</code>.</p><h3 id="input-keyformatter" tabindex="-1"><a class="header-anchor" href="#input-keyformatter"><span><code>input.keyFormatter</code></span></a></h3><p>Specifies a function to be used to transform the translation keys depending on the source they were detected at. Defaults to <code>( key =&gt; key )</code>.</p><h3 id="output-compiled" tabindex="-1"><a class="header-anchor" href="#output-compiled"><span><code>output.compiled</code></span></a></h3><p>Specifies the output file for compiled translations. If a <code>string</code> is provided, it will be used as the <code>path</code> option.</p><h3 id="output-compiled-path" tabindex="-1"><a class="header-anchor" href="#output-compiled-path"><span><code>output.compiled.path</code></span></a></h3><p>Specifies the path to the output file being generated.</p><h3 id="output-compiled-includemeta" tabindex="-1"><a class="header-anchor" href="#output-compiled-includemeta"><span><code>output.compiled.includeMeta</code></span></a></h3><p>Specifies whether to include meta information in the output file. Defaults to <code>false</code>.</p><h3 id="output-compiled-handler" tabindex="-1"><a class="header-anchor" href="#output-compiled-handler"><span><code>output.compiled.handler</code></span></a></h3><p>Specifies a handler function for encoding and writing the output file. It can be synchronous, or return a Promise.</p><p>You can also use built-in handlers by specifying a string name (instead of a function), one of: <code>esm</code> or <code>cjs</code>.</p><p>If left unspecified, the handler will be determined automatically based on the file extension.</p><h3 id="output-missing" tabindex="-1"><a class="header-anchor" href="#output-missing"><span><code>output.missing</code></span></a></h3><p>Specifies the output file for missing translations. If a <code>string</code> is provided, it will be used as the <code>path</code> option.</p><h3 id="output-missing-path" tabindex="-1"><a class="header-anchor" href="#output-missing-path"><span><code>output.missing.path</code></span></a></h3><p>Specifies the path to the output file being generated.</p><h3 id="output-missing-handler" tabindex="-1"><a class="header-anchor" href="#output-missing-handler"><span><code>output.missing.handler</code></span></a></h3><p>Specifies a handler function for encoding and writing the output file. It can be synchronous, or return a Promise.</p><p>You can also use built-in handlers by specifying a string name (instead of a function), one of: <code>txt</code>, <code>yaml</code> or <code>json</code>.</p><p>If left unspecified, the handler will be determined automatically based on the file extension if possible.</p><h3 id="output-unused" tabindex="-1"><a class="header-anchor" href="#output-unused"><span><code>output.unused</code></span></a></h3><p>Specifies the output file for unused translations. If a <code>string</code> is provided, it will be used as the <code>path</code> option.</p><h3 id="output-unused-path" tabindex="-1"><a class="header-anchor" href="#output-unused-path"><span><code>output.unused.path</code></span></a></h3><p>Specifies the path to the output file being generated.</p><h3 id="output-unused-handler" tabindex="-1"><a class="header-anchor" href="#output-unused-handler"><span><code>output.unused.handler</code></span></a></h3><p>Specifies a handler function for encoding and writing the output file. It can be synchronous, or return a Promise.</p><p>You can also use built-in handlers by specifying a string name (instead of a function), one of: <code>txt</code>, <code>yaml</code> or <code>json</code>.</p><p>If left unspecified, the handler will be determined automatically based on the file extension if possible.</p><h3 id="quiet" tabindex="-1"><a class="header-anchor" href="#quiet"><span><code>quiet</code></span></a></h3><p>Specifies whether to suppress logging.</p><h3 id="verbose" tabindex="-1"><a class="header-anchor" href="#verbose"><span><code>verbose</code></span></a></h3><p>Specifies whether to log verbose information.</p>`,52);function f(m,k){const a=t("ExternalLinkIcon");return o(),i("div",null,[d,n("p",null,[l,e(" ships pre-bundled with "),n("a",u,[e("Vite"),p(a)]),e("-compatible plugin to help you quickly get your projects up and running.")]),h])}const y=s(r,[["render",f],["__file","vite.html.vue"]]);export{y as default};
