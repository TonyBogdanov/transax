import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as i,c as d,a as e,b as t,d as n,w as a,e as s}from"./app-d72a7329.js";const c={},h=e("h1",{id:"class-compilertoken",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#class-compilertoken","aria-hidden":"true"},"#"),t(" Class: CompilerToken")],-1),p=e("p",null,"An abstract class representing a single evaluable expression within translation messages.",-1),u=e("h2",{id:"hierarchy",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hierarchy","aria-hidden":"true"},"#"),t(" Hierarchy")],-1),m=e("p",null,[e("strong",null,[e("code",null,"CompilerToken")])],-1),x=e("code",null,"TextToken",-1),f=e("code",null,"LiteralToken",-1),_=e("code",null,"TernaryExpressionToken",-1),g=e("code",null,"ComparisonExpressionToken",-1),b=e("code",null,"CallExpressionToken",-1),y=e("h2",{id:"table-of-contents",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#table-of-contents","aria-hidden":"true"},"#"),t(" Table of contents")],-1),T=e("h3",{id:"constructors",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#constructors","aria-hidden":"true"},"#"),t(" Constructors")],-1),C=e("h3",{id:"properties",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#properties","aria-hidden":"true"},"#"),t(" Properties")],-1),k=e("h3",{id:"methods",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#methods","aria-hidden":"true"},"#"),t(" Methods")],-1),w=s('<h2 id="constructors-1" tabindex="-1"><a class="header-anchor" href="#constructors-1" aria-hidden="true">#</a> Constructors</h2><h3 id="constructor" tabindex="-1"><a class="header-anchor" href="#constructor" aria-hidden="true">#</a> constructor</h3><p>• <code>Protected</code> <strong>new CompilerToken</strong>(<code>text</code>, <code>location</code>)</p><p>Creates a new instance.</p><h4 id="parameters" tabindex="-1"><a class="header-anchor" href="#parameters" aria-hidden="true">#</a> Parameters</h4><table><thead><tr><th style="text-align:left;">Name</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>text</code></td><td style="text-align:left;"><code>string</code></td><td style="text-align:left;">The full text (content) of the expression.</td></tr><tr><td style="text-align:left;"><code>location</code></td><td style="text-align:left;"><code>LocationRange</code></td><td style="text-align:left;">The location of the invocation within the source code.</td></tr></tbody></table><h2 id="properties-1" tabindex="-1"><a class="header-anchor" href="#properties-1" aria-hidden="true">#</a> Properties</h2><h3 id="column" tabindex="-1"><a class="header-anchor" href="#column" aria-hidden="true">#</a> column</h3><p>• <strong>column</strong>: <code>number</code></p><p>The column number of the expression within the translation message.</p><hr><h3 id="line" tabindex="-1"><a class="header-anchor" href="#line" aria-hidden="true">#</a> line</h3><p>• <strong>line</strong>: <code>number</code></p><p>The line number of the expression within the translation message.</p><hr><h3 id="text" tabindex="-1"><a class="header-anchor" href="#text" aria-hidden="true">#</a> text</h3><p>• <strong>text</strong>: <code>string</code></p><p>The full text (content) of the expression.</p><h2 id="methods-1" tabindex="-1"><a class="header-anchor" href="#methods-1" aria-hidden="true">#</a> Methods</h2><h3 id="compile" tabindex="-1"><a class="header-anchor" href="#compile" aria-hidden="true">#</a> compile</h3><p>▸ <code>Abstract</code> <strong>compile</strong>(<code>context</code>): <code>string</code></p><p>Compiles the expression into an executable ECMAScript6 string.</p><h4 id="parameters-1" tabindex="-1"><a class="header-anchor" href="#parameters-1" aria-hidden="true">#</a> Parameters</h4>',23),E=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),N=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),P={style:{"text-align":"left"}},v=e("code",null,"CompilerContext",-1),L=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),R=s('<h4 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> Returns</h4><p><code>string</code></p><hr><h3 id="compilewrap" tabindex="-1"><a class="header-anchor" href="#compilewrap" aria-hidden="true">#</a> compileWrap</h3><p>▸ <code>Protected</code> <strong>compileWrap</strong>(<code>context</code>, <code>instanceOfs</code>): <code>string</code></p><p>Same as <code>compile()</code> except that it wraps the compiled expression in parentheses if the current token is an instance of the specified types.</p><h4 id="parameters-2" tabindex="-1"><a class="header-anchor" href="#parameters-2" aria-hidden="true">#</a> Parameters</h4>',7),V=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"Name"),e("th",{style:{"text-align":"left"}},"Type"),e("th",{style:{"text-align":"left"}},"Description")])],-1),A=e("td",{style:{"text-align":"left"}},[e("code",null,"context")],-1),B={style:{"text-align":"left"}},D=e("code",null,"CompilerContext",-1),M=e("td",{style:{"text-align":"left"}},"The context to use for compiling the expression.",-1),S=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"instanceOfs")]),e("td",{style:{"text-align":"left"}},[e("code",null,"Function"),t("[]")]),e("td",{style:{"text-align":"left"}},"The types to check for.")],-1),W=e("h4",{id:"returns-1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#returns-1","aria-hidden":"true"},"#"),t(" Returns")],-1),O=e("p",null,[e("code",null,"string")],-1);function F(H,j){const o=r("RouterLink");return i(),d("div",null,[h,p,u,e("ul",null,[e("li",null,[m,e("p",null,[t("↳ "),n(o,{to:"/api/classes/TextToken.html"},{default:a(()=>[x]),_:1})]),e("p",null,[t("↳ "),n(o,{to:"/api/classes/LiteralToken.html"},{default:a(()=>[f]),_:1})]),e("p",null,[t("↳ "),n(o,{to:"/api/classes/TernaryExpressionToken.html"},{default:a(()=>[_]),_:1})]),e("p",null,[t("↳ "),n(o,{to:"/api/classes/ComparisonExpressionToken.html"},{default:a(()=>[g]),_:1})]),e("p",null,[t("↳ "),n(o,{to:"/api/classes/CallExpressionToken.html"},{default:a(()=>[b]),_:1})])])]),y,T,e("ul",null,[e("li",null,[n(o,{to:"/api/classes/CompilerToken.html#constructor"},{default:a(()=>[t("constructor")]),_:1})])]),C,e("ul",null,[e("li",null,[n(o,{to:"/api/classes/CompilerToken.html#column"},{default:a(()=>[t("column")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/CompilerToken.html#line"},{default:a(()=>[t("line")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/CompilerToken.html#text"},{default:a(()=>[t("text")]),_:1})])]),k,e("ul",null,[e("li",null,[n(o,{to:"/api/classes/CompilerToken.html#compile"},{default:a(()=>[t("compile")]),_:1})]),e("li",null,[n(o,{to:"/api/classes/CompilerToken.html#compilewrap"},{default:a(()=>[t("compileWrap")]),_:1})])]),w,e("table",null,[E,e("tbody",null,[e("tr",null,[N,e("td",P,[n(o,{to:"/api/classes/CompilerContext.html"},{default:a(()=>[v]),_:1})]),L])])]),R,e("table",null,[V,e("tbody",null,[e("tr",null,[A,e("td",B,[n(o,{to:"/api/classes/CompilerContext.html"},{default:a(()=>[D]),_:1})]),M]),S])]),W,O])}const G=l(c,[["render",F],["__file","CompilerToken.html.vue"]]);export{G as default};
